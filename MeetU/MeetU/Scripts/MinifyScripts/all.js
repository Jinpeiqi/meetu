!function(){"use strict";function e(e,t,n,a,i){function o(){var t=0;e.hasLoaded=!1,l.query({start:r,amount:s},function(n){e.meetupViews.push.apply(e.meetupViews,n),t=n.length,r+=t,5>t&&(e.hasFetchedAll=!0),e.hasFetchedAll?e.hasLoaded=!0:$(window).bind("scroll",p)})}var r=0,s=5,l=t("/api/Meetups"),u=t("/api/loggedUser"),c=t("/api/Joins"),d=t("/api/Comments/");e.hasLoaded=!1,e.hasFetchedAll=!1,n.all([l.query({start:r,amount:2*s},function(t){e.meetupViews=t,r+=2*s}).$promise,u.query(function(t){e.userId=t[0].userId,e.userName=t[0].userName}).$promise]).then(function(){e.hasLoaded=!0,$(window).scroll(p),$(window).scrollTop()+$(window).height()>$(document).height()&&o()});var p=_.debounce(function(){$(window).scrollTop()+$(window).height()>$(document).height()-100&&($(window).unbind("scroll"),o())},200);e.$on("$destroy",function(){$(window).unbind("scroll")}),e.isIn=function(t){return t.some(function(t){return t.userId===e.userId})},e.toggleJoin=function(t){if(e.isIn(t.joins))c["delete"]({meetupId:t.meetup.id,userId:e.userId}).$promise.then(function(){var n=t.joins;n.splice(n.findIndex(function(t){return t.userId===e.userId}),1)},function(e){a.error(e)});else{var n=new c({meetupId:t.meetup.id,userId:e.userId});n.$save(function(){t.joins.push({meetupId:t.meetup.id,userId:e.userId,userName:e.userName})})}},e.toggleDetail=function(e,t){t&&(e.commentCount=0,d.query({meetupId:e.meetup.id},function(t){e.commentData=t,e.commentCount=e.commentData.length}))},e.addComment=function(t){var n=new d({content:t.newComment,by:e.userId,meetupId:t.meetup.id});n.$save(n,function(n){t.commentData.push({id:n.id,content:t.newComment,by:e.userName,meetupId:t.meetup.id,at:n.at}),t.newComment="",t.commentCount=t.commentData.length},function(e){a.error(e)})},e.deleteComment=function(e,t){i({text:"Are you sure you want to delete this comment?",title:"Deleting a comment",ok:"Yes",cancel:"No"}).then(function(){d["delete"]({id:t}).$promise.then(function(){var n=e.commentData;n.splice(n.findIndex(function(e){return e.id===t}),1),e.commentCount=e.commentData.length},function(e){a.error(e)})})},e.deleteMeetup=function(t){i({text:"Are you sure you want to delete this MeetUp?",title:"Deleting a meetup",ok:"Yes",cancel:"No"}).then(function(){l["delete"]({id:t}).$promise.then(function(){var n=e.meetupViews;n.splice(n.findIndex(function(e){return e.meetup.id===t}),1)},function(e){a.error(e)})})},e.parseParticipantName=function(e){return"@"+e.userName.muStrip("@").muCapitalizeFirstLetter()},e.polishUserName=function(e){return e.muStrip("@").muCapitalizeFirstLetter()}}angular.module("meetupModule",["ngResource","angularMoment","ngRoute","angular-confirm","ui.bootstrap.tpls"]).controller("meetupIndexController",e),e.$inject=["$scope","$resource","$q","$log","$confirm"],String.prototype.muStrip=function(e){return this.indexOf(e)<0?this:this.substring(0,this.indexOf(e))},String.prototype.muCapitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)}}(),function(){"use strict";angular.module("meetupModule").run(["$templateCache","$http",function(e,t){t.get("/Scripts/Views/Meetup/Index.html",{cache:e}),t.get("/Scripts/Views/Profile/profile-display.html",{cache:e}),t.get("/Scripts/Views/Meetup/Create.html",{cache:e}),t.get("/Scripts/Directives/subpage-nav/subpage-nav.html",{cache:e}),t.get("/Scripts/Directives/loading-circle/loading-circle.html",{cache:e})}])}(),function(){"use strict";function e(e,t,n,a){var i=this;i.createParams={},i.submitForm=function(){n("/api/loggedUser").query(function(e){i.createParams.sponsor=e[0].userId}).$promise.then(function(){e.debug(i.createParams),n("/api/Meetups").save(i.createParams).$promise.then(function(){e.debug(i.createParams),a.path("/index")})})},$(".js-meetup-create-where").placepicker(),$(".js-meetup-create-when").datetimepicker({minDate:"0"})}angular.module("meetupModule").controller("MeetupCreateController",e),e.$inject=["$log","$q","$resource","$location"]}(),function(){"use strict";function e(e){e.tab=1,e.setTab=function(t){e.tab=t},e.isSet=function(t){return e.tab===t}}angular.module("meetupModule").controller("TabController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,t,n,a,i){console.log(i);var o=this;o.hasLoaded=!1;var r=n("api/Users/Public");o.participatedMeetups=i.participatedMeetups(),o.hostedMeetups=i.hostedMeetups(),o.loremIpsum=i.loremIpsum,r.get({userId:a.profileId,joinedAmount:3,launchedAmount:3},function(e){o.publicProfile=e}).$promise.then(function(){e.debug(o.publicProfile),o.hasLoaded=!0})}angular.module("meetupModule").controller("ProfileDisplayController",e),e.$inject=["$log","$q","$resource","$routeParams","dummyDataService"]}(),function(){"use strict";function e(e,t){e.when("/index",{templateUrl:"/Scripts/Views/Meetup/Index.html"}).when("/Profile/:profileId",{templateUrl:"/Scripts/Views/Profile/profile-display.html"}).when("/Meetup/Create",{templateUrl:"/Scripts/Views/Meetup/Create.html"}).otherwise({redirectTo:"/index"}),t.html5Mode({enabled:!0,requireBase:!1})}angular.element(document.getElementsByTagName("head")).append(angular.element('<base href="'+window.location.pathname+'" />')),angular.module("meetupModule").config(e),e.$inject=["$routeProvider","$locationProvider"]}(),function(){"use strict";function e(e,t){return e.module("angularMoment",[]).constant("angularMomentConfig",{preprocess:null,timezone:"",format:null,statefulFilters:!0}).constant("moment",t).constant("amTimeAgoConfig",{withoutSuffix:!1,serverTime:null,titleFormat:null,fullDateThreshold:null,fullDateFormat:null}).directive("amTimeAgo",["$window","moment","amMoment","amTimeAgoConfig","angularMomentConfig",function(t,n,a,i,o){return function(r,s,l){function u(){var e;if(h)e=h;else if(i.serverTime){var t=(new Date).getTime(),a=t-D+i.serverTime;e=n(a)}else e=n();return e}function c(){g&&(t.clearTimeout(g),g=null)}function d(e){var n=u().diff(e,"day"),a=w&&n>=w;if(a?s.text(e.format(k)):s.text(e.from(u(),v)),y&&!s.attr("title")&&s.attr("title",e.local().format(y)),!a){var i=Math.abs(u().diff(e,"minute")),o=3600;1>i?o=1:60>i?o=30:180>i&&(o=300),g=t.setTimeout(function(){d(e)},1e3*o)}}function p(e){T&&s.attr("datetime",e)}function f(){if(c(),m){var e=a.preprocessDate(m,$,b);d(e),p(e.toISOString())}}var m,h,g=null,b=o.format,v=i.withoutSuffix,y=i.titleFormat,w=i.fullDateThreshold,k=i.fullDateFormat,D=(new Date).getTime(),$=o.preprocess,x=l.amTimeAgo,T="TIME"===s[0].nodeName.toUpperCase();r.$watch(x,function(e){return"undefined"==typeof e||null===e||""===e?(c(),void(m&&(s.text(""),p(""),m=null))):(m=e,void f())}),e.isDefined(l.amFrom)&&r.$watch(l.amFrom,function(e){h="undefined"==typeof e||null===e||""===e?null:n(e),f()}),e.isDefined(l.amWithoutSuffix)&&r.$watch(l.amWithoutSuffix,function(e){"boolean"==typeof e?(v=e,f()):v=i.withoutSuffix}),l.$observe("amFormat",function(e){"undefined"!=typeof e&&(b=e,f())}),l.$observe("amPreprocess",function(e){$=e,f()}),l.$observe("amFullDateThreshold",function(e){w=e,f()}),l.$observe("amFullDateFormat",function(e){k=e,f()}),r.$on("$destroy",function(){c()}),r.$on("amMoment:localeChanged",function(){f()})}}]).service("amMoment",["moment","$rootScope","$log","angularMomentConfig",function(t,n,a,i){this.preprocessors={utc:t.utc,unix:t.unix},this.changeLocale=function(a,i){var o=t.locale(a,i);return e.isDefined(a)&&n.$broadcast("amMoment:localeChanged"),o},this.changeTimezone=function(e){i.timezone=e,n.$broadcast("amMoment:timezoneChanged")},this.preprocessDate=function(n,o,r){return e.isUndefined(o)&&(o=i.preprocess),this.preprocessors[o]?this.preprocessors[o](n,r):(o&&a.warn("angular-moment: Ignoring unsupported value for preprocess: "+o),!isNaN(parseFloat(n))&&isFinite(n)?t(parseInt(n,10)):t(n,r))},this.applyTimezone=function(e,t){return(t=t||i.timezone)?(t.match(/^Z|[+-]\d\d:?\d\d$/i)?e=e.utcOffset(t):e.tz?e=e.tz(t):a.warn("angular-moment: named timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js?"),e):e}}]).filter("amCalendar",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,a);var o=e(n);return o.isValid()?t.applyTimezone(o,i).calendar():""}return a.$stateful=n.statefulFilters,a}]).filter("amDifference",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i,o,r,s){if("undefined"==typeof n||null===n)return"";n=t.preprocessDate(n,r);var l=e(n);if(!l.isValid())return"";var u;if("undefined"==typeof a||null===a)u=e();else if(a=t.preprocessDate(a,s),u=e(a),!u.isValid())return"";return t.applyTimezone(l).diff(t.applyTimezone(u),i,o)}return a.$stateful=n.statefulFilters,a}]).filter("amDateFormat",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(a,i,o,r,s){var l=s||n.format;if("undefined"==typeof a||null===a)return"";a=t.preprocessDate(a,o,l);var u=e(a);return u.isValid()?t.applyTimezone(u,r).format(i):""}return a.$stateful=n.statefulFilters,a}]).filter("amDurationFormat",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e.duration(t,n).humanize(a)}return n.$stateful=t.statefulFilters,n}]).filter("amTimeAgo",["moment","amMoment","angularMomentConfig",function(e,t,n){function a(n,a,i,o){var r,s;return"undefined"==typeof n||null===n?"":(n=t.preprocessDate(n,a),r=e(n),r.isValid()?(s=e(o),"undefined"!=typeof o&&s.isValid()?t.applyTimezone(r).from(s,i):t.applyTimezone(r).fromNow(i)):"")}return a.$stateful=n.statefulFilters,a}]).filter("amSubtract",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e(t).subtract(parseInt(n,10),a)}return n.$stateful=t.statefulFilters,n}]).filter("amAdd",["moment","angularMomentConfig",function(e,t){function n(t,n,a){return"undefined"==typeof t||null===t?"":e(t).add(parseInt(n,10),a)}return n.$stateful=t.statefulFilters,n}])}"function"==typeof define&&define.amd?define(["angular","moment"],e):"undefined"!=typeof module&&module&&module.exports?(e(angular,require("moment")),module.exports="angularMoment"):e(angular,("undefined"!=typeof global?global:window).moment)}(),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/popup.html","uib/template/datepicker/year.html","uib/template/modal/backdrop.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,a){var i=a.has("$animateCss")?a.get("$animateCss"):null;return{link:function(a,o,r){function s(){o.hasClass("collapse")&&o.hasClass("in")||t.resolve(d(a)).then(function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",to:{height:o[0].scrollHeight+"px"}}).start()["finally"](l):e.addClass(o,"in",{to:{height:o[0].scrollHeight+"px"}}).then(l)})}function l(){o.removeClass("collapsing").addClass("collapse").css({height:"auto"}),p(a)}function u(){return o.hasClass("collapse")||o.hasClass("in")?void t.resolve(f(a)).then(function(){o.css({height:o[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:{height:"0"}}).start()["finally"](c):e.removeClass(o,"in",{to:{height:"0"}}).then(c)}):c()}function c(){o.css({height:"0"}),o.removeClass("collapsing").addClass("collapse"),m(a)}var d=n(r.expanding),p=n(r.expanded),f=n(r.collapsing),m=n(r.collapsed);a.$eval(r.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css({height:"auto"}),a.$watch(r.uibCollapse,function(e){e?u():s()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(n){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",function(n){t.toggleClass(e.openClass,!!n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:"^uibAccordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.uibAccordionTransclude]},function(e){if(e){var n=angular.element(t[0].querySelector("[uib-accordion-header]"));n.html(""),n.append(e)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$attrs","$interpolate","$timeout",function(e,t,n,a){e.closeable=!!t.close;var i=angular.isDefined(t.dismissOnTimeout)?n(t.dismissOnTimeout)(e.$parent):null;i&&a(function(){e.close()},parseInt(i,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,a,i){var o=i[0],r=i[1],s=e(a.uibUncheckable);n.find("input").css({display:"none"}),r.$render=function(){n.toggleClass(o.activeClass,angular.equals(r.$modelValue,t.$eval(a.uibBtnRadio)))},n.on(o.toggleEvent,function(){if(!a.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(a.uncheckable)||t.$apply(function(){r.$setViewValue(e?null:t.$eval(a.uibBtnRadio)),r.$render()})}}),a.uibUncheckable&&t.$watch(s,function(e){a.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,a){function i(){return r(n.btnCheckboxTrue,!0)}function o(){return r(n.btnCheckboxFalse,!1)}function r(t,n){return angular.isDefined(t)?e.$eval(t):n}var s=a[0],l=a[1];t.find("input").css({display:"none"}),l.$render=function(){t.toggleClass(s.activeClass,angular.equals(l.$modelValue,i()))},t.on(s.toggleEvent,function(){n.disabled||e.$apply(function(){l.$setViewValue(t.hasClass(s.activeClass)?o():i()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,a,i){function o(){for(;y.length;)y.shift()}function r(e){for(var t=0;t<g.length;t++)g[t].slide.active=t===e}function s(n,a,l){if(!w){if(angular.extend(n,{direction:l}),angular.extend(g[v].slide||{},{direction:l}),i.enabled(t)&&!e.$currentTransition&&g[a].element&&h.slides.length>1){g[a].element.data(b,n.direction);var u=h.getCurrentIndex();angular.isNumber(u)&&g[u].element&&g[u].element.data(b,n.direction),e.$currentTransition=!0,i.on("addClass",g[a].element,function(t,n){if("close"===n&&(e.$currentTransition=null,i.off("addClass",t),y.length)){var a=y.pop().slide,r=a.index,l=r>h.getCurrentIndex()?"next":"prev";o(),s(a,r,l)}})}e.active=n.index,v=n.index,r(a),d()}}function l(e){for(var t=0;t<g.length;t++)if(g[t].slide===e)return t}function u(){f&&(n.cancel(f),f=null)}function c(t){t.length||(e.$currentTransition=null,o())}function d(){u();var t=+e.interval;!isNaN(t)&&t>0&&(f=n(p,t))}function p(){var t=+e.interval;m&&!isNaN(t)&&t>0&&g.length?e.next():e.pause()}var f,m,h=this,g=h.slides=e.slides=[],b="uib-slideDirection",v=e.active,y=[],w=!1;h.addSlide=function(t,n){g.push({slide:t,element:n}),g.sort(function(e,t){return+e.slide.index>+t.slide.index}),(t.index===e.active||1===g.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),v=t.index,e.active=t.index,r(v),h.select(g[l(t)]),1===g.length&&e.play())},h.getCurrentIndex=function(){for(var e=0;e<g.length;e++)if(g[e].slide.index===v)return e},h.next=e.next=function(){var t=(h.getCurrentIndex()+1)%g.length;return 0===t&&e.noWrap()?void e.pause():h.select(g[t],"next")},h.prev=e.prev=function(){var t=h.getCurrentIndex()-1<0?g.length-1:h.getCurrentIndex()-1;return e.noWrap()&&t===g.length-1?void e.pause():h.select(g[t],"prev")},h.removeSlide=function(t){var n=l(t),a=y.indexOf(g[n]);-1!==a&&y.splice(a,1),g.splice(n,1),g.length>0&&v===n?n>=g.length?(v=g.length-1,e.active=v,r(v),h.select(g[g.length-1])):(v=n,e.active=v,r(v),h.select(g[n])):v>n&&(v--,e.active=v),0===g.length&&(v=null,e.active=null,o())},h.select=e.select=function(t,n){var a=l(t.slide);void 0===n&&(n=a>h.getCurrentIndex()?"next":"prev"),t.slide.index===v||e.$currentTransition?t&&t.slide.index!==v&&e.$currentTransition&&y.push(g[a]):s(t.slide,a,n)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.pause=function(){e.noPause||(m=!1,u())},e.play=function(){m||(m=!0,d())},e.$on("$destroy",function(){w=!0,u()}),e.$watch("noTransition",function(e){i.enabled(t,!e)}),e.$watch("interval",d),e.$watchCollection("slides",c),e.$watch("active",function(e){if(angular.isNumber(e)&&v!==e){for(var t=0;t<g.length;t++)if(g[t].slide.index===e){e=t;break}var n=g[e];n&&(v=e,r(e),h.select(g[e]))}})}]).directive("uibCarousel",function(){return{transclude:!0,replace:!0,controller:"UibCarouselController",controllerAs:"carousel",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",function(){return{require:"^uibCarousel",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)})}}}).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}var n="uib-slideDirection";return{beforeAddClass:function(a,i,o){if("active"===i){var r=!1,s=a.data(n),l="next"===s?"left":"right",u=t.bind(this,a,l+" "+s,o);return a.addClass(s),e(a,{addClass:l}).start().done(u),function(){r=!0}}o()},beforeRemoveClass:function(a,i,o){if("active"===i){var r=!1,s=a.data(n),l="next"===s?"left":"right",u=t.bind(this,a,l,o);return e(a,{addClass:l}).start().done(u),function(){r=!0}}o()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter",function(e,t,n,a){function i(e,t){var n=[],i=e.split(""),o=e.indexOf("'");if(o>-1){var r=!1;e=e.split("");for(var s=o;s<e.length;s++)r?("'"===e[s]&&(s+1<e.length&&"'"===e[s+1]?(e[s+1]="$",i[s+1]=""):(i[s]="",r=!1)),e[s]="$"):"'"===e[s]&&(e[s]="$",i[s]="",r=!0);e=e.join("")}return angular.forEach(f,function(a){var o=e.indexOf(a.key);if(o>-1){e=e.split(""),i[o]="("+a.regex+")",e[o]="$";for(var r=o+1,s=o+a.key.length;s>r;r++)i[r]="",e[r]="$";e=e.join(""),n.push({index:o,key:a.key,apply:a[t],matcher:a.regex})}}),{regex:new RegExp("^"+i.join("")+"$"),map:a(n,"index")}}function o(e,t,n){return 1>n?!1:1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}function r(e){return parseInt(e,10)}function s(e,t){return e&&t?d(e,t):e}function l(e,t){return e&&t?d(e,t,!0):e}function u(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function c(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function d(e,t,n){n=n?-1:1;var a=u(t,e.getTimezoneOffset());return c(e,n*(a-e.getTimezoneOffset()))}var p,f,m=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){p=t.id,this.parsers={},this.formatters={},f=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){this.year=+e+2e3},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){var t=e.getMonth();return/^[0-9]$/.test(t)?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){var t=e.getDate();return/^[1-9]$/.test(t)?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],a=t[2],i=t[3];this.hours+=r(n+a),this.minutes+=r(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}]},this.init(),this.filter=function(e,n){if(!angular.isDate(e)||isNaN(e)||!n)return"";n=t.DATETIME_FORMATS[n]||n,t.id!==p&&this.init(),this.formatters[n]||(this.formatters[n]=i(n,"formatter"));var a=this.formatters[n],o=a.map,r=n;return o.reduce(function(t,n,a){var i=r.match(new RegExp("(.*)"+n.key));i&&angular.isString(i[1])&&(t+=i[1],r=r.replace(i[1]+n.key,""));var s=a===o.length-1?r:"";return n.apply?t+n.apply.call(null,e)+s:t+s},"")},this.parse=function(n,a,r){if(!angular.isString(n)||!a)return n;a=t.DATETIME_FORMATS[a]||a,a=a.replace(m,"\\$&"),t.id!==p&&this.init(),this.parsers[a]||(this.parsers[a]=i(a,"apply"));var s=this.parsers[a],l=s.regex,u=s.map,c=n.match(l),d=!1;if(c&&c.length){var f,h;angular.isDate(r)&&!isNaN(r.getTime())?f={year:r.getFullYear(),month:r.getMonth(),date:r.getDate(),hours:r.getHours(),minutes:r.getMinutes(),seconds:r.getSeconds(),milliseconds:r.getMilliseconds()}:(r&&e.warn("dateparser:","baseDate is not a valid date"),f={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var g=1,b=c.length;b>g;g++){var v=u[g-1];"Z"===v.matcher&&(d=!0),v.apply&&v.apply.call(f,c[g])}var y=d?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,w=d?Date.prototype.setUTCHours:Date.prototype.setHours;return o(f.year,f.month,f.date)&&(!angular.isDate(r)||isNaN(r.getTime())||d?(h=new Date(0),y.call(h,f.year,f.month,f.date),w.call(h,f.hours||0,f.minutes||0,f.seconds||0,f.milliseconds||0)):(h=new Date(r),y.call(h,f.year,f.month,f.date),w.call(h,f.hours,f.minutes,f.seconds,f.milliseconds))),h}},this.toTimezone=s,this.fromTimezone=l,this.timezoneToOffset=u,this.addDateMinutes=c,this.convertTimezoneToLocal=d}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,n=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(a,i){function o(e,t,n){l.push(e),u.push({scope:e,element:t}),m.forEach(function(t,n){r(t,e)}),e.$on("$destroy",s)}function r(t,a){var i=t.match(n),o=a.$eval(i[1]),r=i[2],s=c[t];if(!s){var l=function(t){var n=null;u.some(function(e){var a=e.scope.$eval(p);return a===t?(n=e,!0):void 0}),s.lastActivated!==n&&(s.lastActivated&&e.removeClass(s.lastActivated.element,o),n&&e.addClass(n.element,o),s.lastActivated=n)};c[t]=s={lastActivated:null,scope:a,watchFn:l,compareWithExp:r,watcher:a.$watch(r,l)}}s.watchFn(a.$eval(r))}function s(e){var t=e.targetScope,n=l.indexOf(t);if(l.splice(n,1),u.splice(n,1),l.length){var a=l[0];angular.forEach(c,function(e){e.scope===t&&(e.watcher=a.$watch(e.compareWithExp,e.watchFn),e.scope=a)})}else c={}}var l=[],u=[],c={},d=i.uibIsClass.match(t),p=d[2],f=d[1],m=f.split(",");return o}}}]),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,a={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},i={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/};return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){function a(e){return"static"===(t.getComputedStyle(e).position||"static")}n=this.getRawNode(n);for(var i=n.offsetParent||e[0].documentElement;i&&i!==e[0].documentElement&&a(i);)i=i.offsetParent;return i||e[0].documentElement},scrollbarWidth:function(){if(angular.isUndefined(n)){var t=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(t),n=t[0].offsetWidth-t[0].clientWidth,n=isFinite(n)?n:0,t.remove()}return n},isScrollable:function(e,n){e=this.getRawNode(e);var i=n?a.hidden:a.normal,o=t.getComputedStyle(e);return i.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,i){n=this.getRawNode(n);var o=i?a.hidden:a.normal,r=e[0].documentElement,s=t.getComputedStyle(n),l="absolute"===s.position,u=n.parentElement||r;if(u===r||"fixed"===s.position)return r;for(;u.parentElement&&u!==r;){var c=t.getComputedStyle(u);if(l&&"static"!==c.position&&(l=!1),!l&&o.test(c.overflow+c.overflowY+c.overflowX))break;u=u.parentElement}return u},position:function(n,a){n=this.getRawNode(n);var i=this.offset(n);if(a){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var r=this.offsetParent(n),s={top:0,left:0};return r!==e[0].documentElement&&(s=this.offset(r),s.top+=r.clientTop-r.scrollTop,s.left+=r.clientLeft-r.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-s.top),left:Math.round(i.left-s.left)}},offset:function(n){n=this.getRawNode(n);var a=n.getBoundingClientRect();return{width:Math.round(angular.isNumber(a.width)?a.width:n.offsetWidth),height:Math.round(angular.isNumber(a.height)?a.height:n.offsetHeight),top:Math.round(a.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(a.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,a,i){n=this.getRawNode(n),i=i!==!1;var o=n.getBoundingClientRect(),r={top:0,left:0,bottom:0,right:0},s=a?e[0].documentElement:this.scrollParent(n),l=s.getBoundingClientRect();if(r.top=l.top+s.clientTop,r.left=l.left+s.clientLeft,s===e[0].documentElement&&(r.top+=t.pageYOffset,r.left+=t.pageXOffset),r.bottom=r.top+s.clientHeight,r.right=r.left+s.clientWidth,i){var u=t.getComputedStyle(s);r.top+=this.parseStyle(u.paddingTop),r.bottom-=this.parseStyle(u.paddingBottom),r.left+=this.parseStyle(u.paddingLeft),r.right-=this.parseStyle(u.paddingRight)}return{top:Math.round(o.top-r.top),bottom:Math.round(r.bottom-o.bottom),left:Math.round(o.left-r.left),right:Math.round(r.right-o.right)}},parsePlacement:function(e){var t=i.auto.test(e);return t&&(e=e.replace(i.auto,"")),e=e.split("-"),e[0]=e[0]||"top",i.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",i.secondary.test(e[1])||(e[1]="center"),t?e[2]=!0:e[2]=!1,
e},positionElements:function(e,n,a,o){e=this.getRawNode(e),n=this.getRawNode(n);var r=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),s=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");a=this.parsePlacement(a);var l=o?this.offset(e):this.position(e),u={top:0,left:0,placement:""};if(a[2]){var c=this.viewportOffset(e,o),d=t.getComputedStyle(n),p={width:r+Math.round(Math.abs(this.parseStyle(d.marginLeft)+this.parseStyle(d.marginRight))),height:s+Math.round(Math.abs(this.parseStyle(d.marginTop)+this.parseStyle(d.marginBottom)))};if(a[0]="top"===a[0]&&p.height>c.top&&p.height<=c.bottom?"bottom":"bottom"===a[0]&&p.height>c.bottom&&p.height<=c.top?"top":"left"===a[0]&&p.width>c.left&&p.width<=c.right?"right":"right"===a[0]&&p.width>c.right&&p.width<=c.left?"left":a[0],a[1]="top"===a[1]&&p.height-l.height>c.bottom&&p.height-l.height<=c.top?"bottom":"bottom"===a[1]&&p.height-l.height>c.top&&p.height-l.height<=c.bottom?"top":"left"===a[1]&&p.width-l.width>c.right&&p.width-l.width<=c.left?"right":"right"===a[1]&&p.width-l.width>c.left&&p.width-l.width<=c.right?"left":a[1],"center"===a[1])if(i.vertical.test(a[0])){var f=l.width/2-r/2;c.left+f<0&&p.width-l.width<=c.right?a[1]="left":c.right+f<0&&p.width-l.width<=c.left&&(a[1]="right")}else{var m=l.height/2-p.height/2;c.top+m<0&&p.height-l.height<=c.bottom?a[1]="top":c.bottom+m<0&&p.height-l.height<=c.top&&(a[1]="bottom")}}switch(a[0]){case"top":u.top=l.top-s;break;case"bottom":u.top=l.top+l.height;break;case"left":u.left=l.left-r;break;case"right":u.left=l.left+l.width}switch(a[1]){case"top":u.top=l.top;break;case"bottom":u.top=l.top+l.height-s;break;case"left":u.left=l.left;break;case"right":u.left=l.left+l.width-r;break;case"center":i.vertical.test(a[0])?u.left=l.left+l.width/2-r/2:u.top=l.top+l.height/2-s/2}return u.top=Math.round(u.top),u.left=Math.round(u.left),u.placement="center"===a[1]?a[0]:a[0]+"-"+a[1],u},positionArrow:function(e,n){e=this.getRawNode(e);var a=e.querySelector(".tooltip-inner, .popover-inner");if(a){var o=angular.element(a).hasClass("tooltip-inner"),r=o?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(r){var s={top:"",bottom:"",left:"",right:""};if(n=this.parsePlacement(n),"center"===n[1])return void angular.element(r).css(s);var l="border-"+n[0]+"-width",u=t.getComputedStyle(r)[l],c="border-";c+=i.vertical.test(n[0])?n[0]+"-"+n[1]:n[1]+"-"+n[0],c+="-radius";var d=t.getComputedStyle(o?a:e)[c];switch(n[0]){case"top":s.bottom=o?"0":"-"+u;break;case"bottom":s.top=o?"0":"-"+u;break;case"left":s.right=o?"0":"-"+u;break;case"right":s.left=o?"0":"-"+u}s[n[1]]=d,angular.element(r).css(s)}}}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).value("uibDatepickerAttributeWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerSuppressError","uibDatepickerAttributeWarning","uibDateParser",function(e,t,n,a,i,o,r,s,l,u,c){function d(t){e.datepickerMode=t,g&&(e.datepickerOptions.datepickerMode=t)}var p=this,f={$setViewValue:angular.noop},m={},h=[],g=!!t.datepickerOptions;if(this.modes=["day","month","year"],g)["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","initDate","maxDate","maxMode","minDate","minMode","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:s.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":p[t]=angular.isDefined(e.datepickerOptions[t])?a(e.datepickerOptions[t])(e.$parent):s[t];break;case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":p[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:s[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?p.startingDay=e.datepickerOptions.startingDay:angular.isNumber(s.startingDay)?p.startingDay=s.startingDay:p.startingDay=(i.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(e){e?angular.isDate(e)?p[t]=c.fromTimezone(new Date(e),m.timezone):p[t]=new Date(r(e,"medium")):p[t]=null,p.refreshView()}):p[t]=s[t]?c.fromTimezone(new Date(s[t]),m.timezone):null;break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(n){p[t]=e[t]=angular.isDefined(n)?n:datepickerOptions[t],("minMode"===t&&p.modes.indexOf(e.datepickerOptions.datepickerMode)<p.modes.indexOf(p[t])||"maxMode"===t&&p.modes.indexOf(e.datepickerOptions.datepickerMode)>p.modes.indexOf(p[t]))&&(e.datepickerMode=p[t],e.datepickerOptions.datepickerMode=p[t])}):p[t]=e[t]=s[t]||null;break;case"initDate":e.datepickerOptions.initDate?(p.activeDate=c.fromTimezone(e.datepickerOptions.initDate,m.timezone)||new Date,e.$watch(function(){return e.datepickerOptions.initDate},function(e){e&&(f.$isEmpty(f.$modelValue)||f.$invalid)&&(p.activeDate=c.fromTimezone(e,m.timezone),p.refreshView())})):p.activeDate=new Date}});else{if(angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle"],function(n){p[n]=angular.isDefined(t[n])?a(t[n])(e.$parent):s[n],angular.isDefined(t[n])&&u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.forEach(["showWeeks","yearRows","yearColumns","shortcutPropagation"],function(n){p[n]=angular.isDefined(t[n])?e.$parent.$eval(t[n]):s[n],angular.isDefined(t[n])&&u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.forEach(["dateDisabled","customClass"],function(e){angular.isDefined(t[e])&&u&&o.warn("uib-datepicker "+e+" attribute usage is deprecated, use datepicker-options attribute instead")}),angular.isDefined(t.startingDay)?(u&&o.warn("uib-datepicker startingDay attribute usage is deprecated, use datepicker-options attribute instead"),p.startingDay=e.$parent.$eval(t.startingDay)):angular.isNumber(s.startingDay)?p.startingDay=s.startingDay:p.startingDay=(i.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7,angular.forEach(["minDate","maxDate"],function(n){t[n]?(u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead"),h.push(e.$parent.$watch(t[n],function(e){e?angular.isDate(e)?p[n]=c.fromTimezone(new Date(e),m.timezone):p[n]=new Date(r(e,"medium")):p[n]=null,p.refreshView()}))):p[n]=s[n]?c.fromTimezone(new Date(s[n]),m.timezone):null}),angular.forEach(["minMode","maxMode"],function(n){t[n]?(u&&o.warn("uib-datepicker "+n+" attribute usage is deprecated, use datepicker-options attribute instead"),h.push(e.$parent.$watch(t[n],function(a){p[n]=e[n]=angular.isDefined(a)?a:t[n],("minMode"===n&&p.modes.indexOf(e.datepickerMode)<p.modes.indexOf(p[n])||"maxMode"===n&&p.modes.indexOf(e.datepickerMode)>p.modes.indexOf(p[n]))&&(e.datepickerMode=p[n])}))):p[n]=e[n]=s[n]||null}),angular.isDefined(t.initDate)){u&&o.warn("uib-datepicker initDate attribute usage is deprecated, use datepicker-options attribute instead");var b=c.fromTimezone(e.$parent.$eval(t.initDate),m.timezone);this.activeDate=isNaN(b)?new Date:b,h.push(e.$parent.$watch(t.initDate,function(e){e&&(f.$isEmpty(f.$modelValue)||f.$invalid)&&(e=c.fromTimezone(e,m.timezone),p.activeDate=isNaN(e)?new Date:e,p.refreshView())}))}else this.activeDate=new Date;t.datepickerMode&&u&&o.warn("uib-datepicker datepickerMode attribute usage is deprecated, use datepicker-options attribute instead"),e.datepickerMode=e.datepickerMode||s.datepickerMode}e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(t.disabled)||!1,angular.isDefined(t.ngDisabled)&&h.push(e.$parent.$watch(t.ngDisabled,function(t){e.disabled=t,p.refreshView()})),e.isActive=function(t){return 0===p.compare(t.date,p.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){f=e,m=e.$options||s.ngModelOptions,this.activeDate=f.$modelValue?c.fromTimezone(new Date(f.$modelValue),m.timezone):c.fromTimezone(new Date,m.timezone),f.$render=function(){p.render()}},this.render=function(){if(f.$viewValue){var e=new Date(f.$viewValue),t=!isNaN(e);t?this.activeDate=c.fromTimezone(e,m.timezone):l||o.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=f.$viewValue?new Date(f.$viewValue):null;t=c.fromTimezone(t,m.timezone),f.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var a=f.$viewValue?new Date(f.$viewValue):null;a=c.fromTimezone(a,m.timezone);var i=new Date;i=c.fromTimezone(i,m.timezone);var o=this.compare(t,i),r={date:t,label:c.filter(t,n),selected:a&&0===this.compare(t,a),disabled:this.isDisabled(t),past:0>o,current:0===o,future:o>0,customClass:this.customClass(t)||null};return a&&0===this.compare(t,a)&&(e.selectedDt=r),p.activeDate&&0===this.compare(r.date,p.activeDate)&&(e.activeDt=r),r},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===p.minMode){var n=f.$viewValue?c.fromTimezone(new Date(f.$viewValue),m.timezone):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=c.toTimezone(n,m.timezone),f.$setViewValue(n),f.$render()}else p.activeDate=t,d(p.modes[p.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode")},e.move=function(e){var t=p.activeDate.getFullYear()+e*(p.step.years||0),n=p.activeDate.getMonth()+e*(p.step.months||0);p.activeDate.setFullYear(t,n,1),p.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===p.maxMode&&1===t||e.datepickerMode===p.minMode&&-1===t||(d(p.modes[p.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var v=function(){p.element[0].focus()};e.$on("uib:datepicker.focus",v),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),p.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(p.isDisabled(p.activeDate))return;e.select(p.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(p.handleKeyDown(n,t),p.refreshView()):e.toggleMode("up"===n?1:-1)},e.$on("$destroy",function(){for(;h.length;)h.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?o[t]:29}function i(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}var o=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,a=new Array(t),i=new Date(e),o=0;t>o;)n=new Date(i),a[o++]=n,i.setDate(i.getDate()+1);return a},this._refreshView=function(){var t=this.activeDate.getFullYear(),a=this.activeDate.getMonth(),o=new Date(this.activeDate);o.setFullYear(t,a,1);var r=this.startingDay-o.getDay(),s=r>0?7-r:-r,l=new Date(o);s>0&&l.setDate(-s+1);for(var u=this.getDates(l,42),c=0;42>c;c++)u[c]=angular.extend(this.createDateObject(u[c],this.formatDay),{secondary:u[c].getMonth()!==a,uid:e.uniqueId+"-"+c});e.labels=new Array(7);for(var d=0;7>d;d++)e.labels[d]={abbr:n(u[d].date,this.formatDayHeader),full:n(u[d].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(u,7),e.showWeeks){e.weekNumbers=[];for(var p=(11-this.startingDay)%7,f=e.rows.length,m=0;f>m;m++)e.weekNumbers.push(i(e.rows[m][p].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var i=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(i,1),n=Math.min(a(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=a(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,a=new Array(12),i=this.activeDate.getFullYear(),o=0;12>o;o++)t=new Date(this.activeDate),t.setFullYear(i,o,1),a[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(a,3)},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),a=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=3;else if("right"===e)n+=1;else if("down"===e)n+=3;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(a)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){function a(e){return parseInt((e-1)/o,10)*o+1}var i,o;this.element=t,this.yearpickerInit=function(){i=this.yearColumns,o=this.yearRows*i,this.step={years:o}},this._refreshView=function(){for(var t,n=new Array(o),r=0,s=a(this.activeDate.getFullYear());o>r;r++)t=new Date(this.activeDate),t.setFullYear(s+r,0,1),n[r]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=this.split(n,i),e.columns=i},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=i:"right"===e?n+=1:"down"===e?n+=i:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*o:"home"===e?n=a(this.activeDate.getFullYear()):"end"===e&&(n=a(this.activeDate.getFullYear())+o-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",datepickerOptions:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["uibDatepicker","^ngModel"],controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("uibDaypicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],controller:"UibDaypickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibMonthpicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],controller:"UibMonthpickerController",link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibYearpicker",function(){return{replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],controller:"UibYearpickerController",link:function(e,t,n,a){var i=a[0];angular.extend(i,a[1]),i.yearpickerInit(),i.refreshView()}}}).value("uibDatepickerPopupAttributeWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepicker/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","uibDatepickerPopupAttributeWarning",function(e,t,n,a,i,o,r,s,l,u,c,d,p,f,m,h){function g(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function b(t){var n=d.parse(t,$,e.date);if(isNaN(n))for(var a=0;a<_.length;a++)if(n=d.parse(t,_[a],e.date),!isNaN(n))return n;return n}function v(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=b(e);if(!isNaN(t))return d.toTimezone(t,A.timezone)}return F.$options&&F.$options.allowInvalid?e:void 0}function y(e,t){var a=e||t;return n.ngRequired||a?(angular.isNumber(a)&&(a=new Date(a)),a?angular.isDate(a)&&!isNaN(a)?!0:angular.isString(a)?!isNaN(b(t)):!1:!0):!0}function w(n){if(e.isOpen||!e.disabled){var a=E[0],i=t[0].contains(n.target),o=void 0!==a.contains&&a.contains(n.target);!e.isOpen||i||o||e.$apply(function(){e.isOpen=!1})}}function k(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!1}),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!0}))}function D(){if(e.isOpen){var a=angular.element(E[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:p.placement,o=u.positionElements(t,a,i,T);a.css({top:o.top+"px",left:o.left+"px"}),a.hasClass("uib-position-measure")&&a.removeClass("uib-position-measure")}}var $,x,T,M,S,C,O,P,I,F,A,E,_,N={},W=!1,U=[];e.watchData={},this.init=function(u){if(F=u,A=u.$options||m.ngModelOptions,x=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):p.closeOnDateSelection,T=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):p.appendToBody,M=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):p.onOpenFocus,S=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:p.datepickerPopupTemplateUrl,C=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:p.datepickerTemplateUrl,_=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):p.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):p.showButtonBar,p.html5Types[n.type]?($=p.html5Types[n.type],W=!0):($=n.uibDatepickerPopup||p.datepickerPopup,n.$observe("uibDatepickerPopup",function(e,t){var n=e||p.datepickerPopup;if(n!==$&&($=n,F.$modelValue=null,!$))throw new Error("uibDatepickerPopup must have a date format specified.")})),!$)throw new Error("uibDatepickerPopup must have a date format specified.");if(W&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");O=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),e.ngModelOptions=angular.copy(A),e.ngModelOptions.timezone=null,e.ngModelOptions.updateOnDefault===!0&&(e.ngModelOptions.updateOn=e.ngModelOptions.updateOn?e.ngModelOptions.updateOn+" default":"default"),O.attr({"ng-model":"date","ng-model-options":"ngModelOptions","ng-change":"dateSelection(date)","template-url":S}),P=angular.element(O.children()[0]),P.attr("template-url",C),W&&"month"===n.type&&(P.attr("datepicker-mode",'"month"'),P.attr("min-mode","month")),e.datepickerOptions&&P.attr("datepicker-options","datepickerOptions"),angular.forEach(["minMode","maxMode","datepickerMode","shortcutPropagation"],function(t){if(n[t]){h&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var a=o(n[t]),r={get:function(){return a(e.$parent)}};if(P.attr(g(t),"watchData."+t),"datepickerMode"===t){var s=a.assign;r.set=function(t){s(e.$parent,t)}}Object.defineProperty(e.watchData,t,r)}}),angular.forEach(["minDate","maxDate","initDate"],function(t){if(n[t]){h&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var a=o(n[t]);U.push(e.$parent.$watch(a,function(n){if("minDate"===t||"maxDate"===t)null===n?N[t]=null:angular.isDate(n)?N[t]=d.fromTimezone(new Date(n),A.timezone):N[t]=new Date(c(n,"medium")),e.watchData[t]=null===n?null:N[t];else{var a=n?new Date(n):new Date;e.watchData[t]=d.fromTimezone(a,A.timezone)}})),P.attr(g(t),"watchData."+t)}}),n.dateDisabled&&(h&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr("date-disabled","dateDisabled({ date: date, mode: mode })")),angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRows","yearColumns"],function(e){angular.isDefined(n[e])&&(h&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr(g(e),n[e]))}),n.customClass&&(h&&i.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"),P.attr("custom-class","customClass({ date: date, mode: mode })")),W?F.$formatters.push(function(t){return e.date=d.fromTimezone(t,A.timezone),t}):(F.$$parserName="date",F.$validators.date=y,F.$parsers.unshift(v),F.$formatters.push(function(t){return F.$isEmpty(t)?(e.date=t,t):(e.date=d.fromTimezone(t,A.timezone),angular.isNumber(e.date)&&(e.date=new Date(e.date)),d.filter(e.date,$))})),F.$viewChangeListeners.push(function(){e.date=b(F.$viewValue)}),t.on("keydown",k),E=a(O)(e),O.remove(),T?s.find("body").append(E):t.after(E),e.$on("$destroy",function(){for(e.isOpen===!0&&(l.$$phase||e.$apply(function(){e.isOpen=!1})),E.remove(),t.off("keydown",k),s.off("click",w),I&&I.off("scroll",D),angular.element(r).off("resize",D);U.length;)U.shift()()})},e.getText=function(t){return e[t+"Text"]||p[t+"Text"]},e.isDisabled=function(t){return"today"===t&&(t=d.fromTimezone(new Date,A.timezone)),e.datepickerOptions?e.datepickerOptions&&e.datepickerOptions.minDate&&e.compare(t,e.datepickerOptions.minDate)<0||e.datepickerOptions.maxDate&&e.compare(t,e.datepickerOptions.maxDate)>0:e.watchData.minDate&&e.compare(t,N.minDate)<0||e.watchData.maxDate&&e.compare(t,N.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){angular.isDefined(n)&&(e.date=n);var a=e.date?d.filter(e.date,$):null;t.val(a),F.$setViewValue(a),x&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var a=new Date;angular.isDate(e.date)?(t=new Date(e.date),t.setFullYear(a.getFullYear(),a.getMonth(),a.getDate())):t=new Date(a.setHours(0,0,0,0))}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&U.push(e.$parent.$watch(o(n.ngDisabled),function(t){e.disabled=t})),e.$watch("isOpen",function(a){a?e.disabled?e.isOpen=!1:f(function(){D(),M&&e.$broadcast("uib:datepicker.focus"),s.on("click",w);var a=n.popupPlacement?n.popupPlacement:p.placement;T||u.parsePlacement(a)[2]?(I=I||angular.element(u.scrollParent(t)),I&&I.on("scroll",D)):I=null,angular.element(r).on("resize",D)},0,!1):(s.off("click",w),I&&I.off("scroll",D),angular.element(r).off("resize",D))}),e.$on("uib:datepicker.mode",function(){f(D,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(e,t,n,a){var i=a[0],o=a[1];o.init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var a;return function(){var i=this,o=Array.prototype.slice.call(arguments);a&&e.cancel(a),a=e(function(){t.apply(i,o)},n)}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t){n||(e.on("click",a),e.on("keydown",i)),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t){n===t&&(n=null,e.off("click",a),e.off("keydown",i))};var a=function(e){if(n&&!(e&&"disabled"===n.getAutoClose()||e&&3===e.which)){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.isOpen=!1,t.$$phase||n.$apply())}}},i=function(e){27===e.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&n.isOpen&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,s,l,u,c){var d,p,f=this,m=e.$new(),h=i.appendToOpenClass,g=i.openClass,b=angular.noop,v=n.onToggle?a(n.onToggle):angular.noop,y=!1,w=null,k=!1,D=l.find("body");t.addClass("dropdown"),this.init=function(){if(n.isOpen&&(p=a(n.isOpen),b=p.assign,e.$watch(p,function(e){m.isOpen=!!e})),angular.isDefined(n.dropdownAppendTo)){var i=a(n.dropdownAppendTo)(m);i&&(w=angular.element(i))}y=angular.isDefined(n.dropdownAppendToBody),k=angular.isDefined(n.keyboardNav),y&&!w&&(w=D),w&&f.dropdownMenu&&(w.append(f.dropdownMenu),t.on("$destroy",function(){f.dropdownMenu.remove()}))},this.toggle=function(e){return m.isOpen=arguments.length?!!e:!m.isOpen,angular.isFunction(b)&&b(m,m.isOpen),m.isOpen},this.isOpen=function(){return m.isOpen},m.getToggleElement=function(){return f.toggleElement},m.getAutoClose=function(){return n.autoClose||"always"},m.getElement=function(){return t},m.isKeynavEnabled=function(){return k},m.focusDropdownEntry=function(e){var n=f.dropdownMenu?angular.element(f.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(f.selectedOption)?f.selectedOption=f.selectedOption===n.length-1?f.selectedOption:f.selectedOption+1:f.selectedOption=0;break;case 38:angular.isNumber(f.selectedOption)?f.selectedOption=0===f.selectedOption?0:f.selectedOption-1:f.selectedOption=n.length-1}n[f.selectedOption].focus()},m.getDropdownElement=function(){return f.dropdownMenu},m.focusToggleElement=function(){f.toggleElement&&f.toggleElement[0].focus()},m.$watch("isOpen",function(n,a){if(w&&f.dropdownMenu){var i,l,p=s.positionElements(t,f.dropdownMenu,"bottom-left",!0);if(i={top:p.top+"px",display:n?"block":"none"},l=f.dropdownMenu.hasClass("dropdown-menu-right"),l?(i.left="auto",i.right=window.innerWidth-(p.left+t.prop("offsetWidth"))+"px"):(i.left=p.left+"px",i.right="auto"),!y){var k=s.offset(w);i.top=p.top-k.top+"px",l?i.right=window.innerWidth-(p.left-k.left+t.prop("offsetWidth"))+"px":i.left=p.left-k.left+"px"}f.dropdownMenu.css(i)}var D=w?w:t,$=D.hasClass(w?h:g);if($===!n&&r[n?"addClass":"removeClass"](D,w?h:g).then(function(){angular.isDefined(n)&&n!==a&&v(e,{open:!!n})}),n)f.dropdownMenuTemplateUrl&&c(f.dropdownMenuTemplateUrl).then(function(e){d=m.$new(),u(e.trim())(d,function(e){var t=e;f.dropdownMenu.replaceWith(t),f.dropdownMenu=t})}),m.focusToggleElement(),o.open(m);else{if(f.dropdownMenuTemplateUrl){d&&d.$destroy();var x=angular.element('<ul class="dropdown-menu"></ul>');f.dropdownMenu.replaceWith(x),f.dropdownMenu=x}o.close(m),f.selectedOption=null}angular.isFunction(b)&&b(e,n)}),e.$on("$locationChangeSuccess",function(){"disabled"!==m.getAutoClose()&&(m.isOpen=!1)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,a){a.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,a){if(a&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t===e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap"]).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}}).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var a=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,r){if(a)return a.resolve(e,i,o,r);var s=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?s.push(n.resolve(t.invoke(e))):angular.isString(e)?s.push(n.resolve(t.get(e))):s.push(n.resolve(e))}),n.all(s).then(function(t){var n={},a=0;return angular.forEach(e,function(e,i){n[i]=t[a++]}),n})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){function a(t,a,i){
i.modalInClass&&(e.addClass(a,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(n,o){var r=o();t.modalOptions.animation?e.removeClass(a,i.modalInClass).then(r):r()}))}return{replace:!0,templateUrl:"uib/template/modal/backdrop.html",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,a){return{scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,r){o.addClass(r.windowClass||""),o.addClass(r.windowTopClass||""),i.size=r.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var s=t.defer();r.$observe("modalRender",function(e){"true"===e&&s.resolve()}),s.promise.then(function(){var s=null;r.modalInClass&&(s=n(o,{addClass:r.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();n(o,{removeClass:r.modalInClass}).start().then(a)})),t.when(s).then(function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!a[0].activeElement||!o[0].contains(a[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap",function(e,t,n,a,i,o,r,s){function l(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function u(){for(var e=-1,t=y.keys(),n=0;n<t.length;n++)y.get(t[n]).value.backdrop&&(e=n);return e}function c(e,t){var n=y.get(e).value,a=n.appendTo;y.remove(e),f(n.modalDomEl,n.modalScope,function(){var t=n.openedClass||v;w.remove(t,e),a.toggleClass(t,w.hasKey(t)),d(!0)},n.closedDeferred),p(),t&&t.focus?t.focus():a.focus&&a.focus()}function d(e){var t;y.length()>0&&(t=y.top().value,t.modalDomEl.toggleClass(t.windowTopClass||"",e))}function p(){if(g&&-1===u()){var e=b;f(g,b,function(){e=null}),g=void 0,b=void 0}}function f(t,n,a,i){function r(){r.done||(r.done=!0,e.leave(t).then(function(){t.remove(),i&&i.resolve()}),n.$destroy(),a&&a())}var s,l=null,u=function(){return s||(s=o.defer(),l=s.promise),function(){s.resolve()}};return n.$broadcast(k.NOW_CLOSING_EVENT,u),o.when(l).then(r)}function m(e){if(e.isDefaultPrevented())return e;var t=y.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply(function(){k.dismiss(t.key,"escape key press")}));break;case 9:var n=k.loadFocusElementList(t),a=!1;e.shiftKey?(k.isFocusInFirstItem(e,n)||k.isModalFocused(e,t))&&(a=k.focusLastFocusableElement(n)):k.isFocusInLastItem(e,n)&&(a=k.focusFirstFocusableElement(n)),a&&(e.preventDefault(),e.stopPropagation())}}function h(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}var g,b,v="modal-open",y=s.createNew(),w=r.createNew(),k={NOW_CLOSING_EVENT:"modal.stack.now-closing"},D="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(u,function(e){b&&(b.index=e)}),n.on("keydown",m),i.$on("$destroy",function(){n.off("keydown",m)}),k.open=function(t,o){var r=n[0].activeElement,s=o.openedClass||v;d(!1),y.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),w.put(s,t);var l=o.appendTo,c=u();if(!l.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");c>=0&&!g&&(b=i.$new(!0),b.modalOptions=o,b.index=c,g=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),g.attr("backdrop-class",o.backdropClass),o.animation&&g.attr("modal-animation","true"),a(g)(b),e.enter(g,l));var p=angular.element('<div uib-modal-window="modal-window"></div>');p.attr({"template-url":o.windowTemplateUrl,"window-class":o.windowClass,"window-top-class":o.windowTopClass,size:o.size,index:y.length()-1,animate:"animate"}).html(o.content),o.animation&&p.attr("modal-animation","true"),e.enter(a(p)(o.scope),l).then(function(){o.scope.$$uibDestructionScheduled||e.addClass(l,s)}),y.top().value.modalDomEl=p,y.top().value.modalOpener=r},k.close=function(e,t){var n=y.get(e);return n&&h(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),c(e,n.value.modalOpener),!0):!n},k.dismiss=function(e,t){var n=y.get(e);return n&&h(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),c(e,n.value.modalOpener),!0):!n},k.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},k.getTop=function(){return y.top()},k.modalRendered=function(e){var t=y.get(e);t&&t.value.renderDeferred.resolve()},k.focusFirstFocusableElement=function(e){return e.length>0?(e[0].focus(),!0):!1},k.focusLastFocusableElement=function(e){return e.length>0?(e[e.length-1].focus(),!0):!1},k.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},k.isFocusInFirstItem=function(e,t){return t.length>0?(e.target||e.srcElement)===t[0]:!1},k.isFocusInLastItem=function(e,t){return t.length>0?(e.target||e.srcElement)===t[t.length-1]:!1},k.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll(D);return n?Array.prototype.filter.call(n,function(e){return l(e)}):n}}},k}]).provider("$uibModal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,a,i,o,r,s){function l(e){return e.template?n.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}var u={},c=null;return u.getPromiseChain=function(){return c},u.open=function(i){function u(){return b}var d=n.defer(),p=n.defer(),f=n.defer(),m=n.defer(),h={result:d.promise,opened:p.promise,closed:f.promise,rendered:m.promise,close:function(e){return s.close(h,e)},dismiss:function(e){return s.dismiss(h,e)}};if(i=angular.extend({},e.options,i),i.resolve=i.resolve||{},i.appendTo=i.appendTo||a.find("body").eq(0),!i.template&&!i.templateUrl)throw new Error("One of template or templateUrl options is required.");var g,b=n.all([l(i),r.resolve(i.resolve,{},null,null)]);return g=c=n.all([c]).then(u,u).then(function(e){var n=i.scope||t,a=n.$new();a.$close=h.close,a.$dismiss=h.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var r,l,u={};i.controller&&(u.$scope=a,u.$uibModalInstance=h,angular.forEach(e[1],function(e,t){u[t]=e}),l=o(i.controller,u,!0),i.controllerAs?(r=l.instance,i.bindToController&&(r.$close=a.$close,r.$dismiss=a.$dismiss,angular.extend(r,n)),r=l(),a[i.controllerAs]=r):r=l(),angular.isFunction(r.$onInit)&&r.$onInit()),s.open(h,{scope:a,deferred:d,renderDeferred:m,closedDeferred:f,content:e[0],animation:i.animation,backdrop:i.backdrop,keyboard:i.keyboard,backdropClass:i.backdropClass,windowTopClass:i.windowTopClass,windowClass:i.windowClass,windowTemplateUrl:i.windowTemplateUrl,size:i.size,openedClass:i.openedClass,appendTo:i.appendTo}),p.resolve(!0)},function(e){p.reject(e),d.reject(e)})["finally"](function(){c===g&&(c=null)}),h},u}]};return e}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,a){t.setNumPages=a.numPages?e(a.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},a.itemsPerPage?t._watchers.push(n.$parent.$watch(a.itemsPerPage,function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()})):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",function(e,a){(angular.isDefined(e)||e!==a)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())})},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,a){a&&a.preventDefault();var i=!n.ngDisabled||!a;i&&n.page!==e&&e>0&&e<=n.totalPages&&(a&&a.target&&a.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",function(){for(;t._watchers.length;)t._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,a){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):a.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},replace:!0,link:function(t,n,a,i){var o=i[0],r=i[1];r&&o.init(r,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,a,i){function o(e,t,n){return{number:e,text:t,active:n}}function r(e,t){var n=[],a=1,i=t,r=angular.isDefined(l)&&t>l;r&&(u?(a=Math.max(e-Math.floor(l/2),1),i=a+l-1,i>t&&(i=t,a=i-l+1)):(a=(Math.ceil(e/l)-1)*l+1,i=Math.min(a+l-1,t)));for(var s=a;i>=s;s++){var f=o(s,p(s),s===e);n.push(f)}if(r&&l>0&&(!u||c||d)){if(a>1){if(!d||a>3){var m=o(a-1,"...",!1);n.unshift(m)}if(d){if(3===a){var h=o(2,"2",!1);n.unshift(h)}var g=o(1,"1",!1);n.unshift(g)}}if(t>i){if(!d||t-2>i){var b=o(i+1,"...",!1);n.push(b)}if(d){if(i===t-2){var v=o(t-1,t-1,!1);n.push(v)}var y=o(t,t,!1);n.push(y)}}}return n}var s=this,l=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,u=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,c=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,d=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,p=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,a.create(this,e,t),t.maxSize&&s._watchers.push(e.$parent.$watch(n(t.maxSize),function(e){l=parseInt(e,10),s.render()}));var f=this.render;this.render=function(){f(),e.page>0&&e.page<=e.totalPages&&(e.pages=r(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},replace:!0,link:function(e,n,a,i){var o=i[0],r=i[1];r&&o.init(r,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(i,o,r,s,l,u,c,d,p){function f(e){if(27===e.which){var t=m.top();t&&(t.value.close(),m.removeTop(),t=null)}}var m=p.createNew();return s.on("keypress",f),c.$on("$destroy",function(){s.off("keypress",f)}),function(i,c,p,f){function h(e){var t=(e||f.trigger||p).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}f=angular.extend({},t,a,f);var g=e(i),b=u.startSymbol(),v=u.endSymbol(),y="<div "+g+'-popup title="'+b+"title"+v+'" '+(f.useContentExp?'content-exp="contentExp()" ':'content="'+b+"content"+v+'" ')+'placement="'+b+"placement"+v+'" popup-class="'+b+"popupClass"+v+'" animation="animation" is-open="isOpen"origin-scope="origScope" class="uib-position-measure"></div>';return{compile:function(e,t){var n=o(y);return function(e,t,a,o){function u(){z.isOpen?g():p()}function p(){U&&!e.$eval(a[c+"Enable"])||(w(),$(),z.popupDelay?F||(F=r(b,z.popupDelay,!1)):b())}function g(){v(),z.popupCloseDelay?A||(A=r(y,z.popupCloseDelay,!1)):y()}function b(){return v(),w(),z.content?(k(),void z.$evalAsync(function(){z.isOpen=!0,x(!0),V()})):angular.noop}function v(){F&&(r.cancel(F),F=null),E&&(r.cancel(E),E=null)}function y(){z&&z.$evalAsync(function(){z&&(z.isOpen=!1,x(!1),z.animation?I||(I=r(D,150,!1)):D())})}function w(){A&&(r.cancel(A),A=null),I&&(r.cancel(I),I=null)}function k(){O||(P=z.$new(),O=n(P,function(e){N?s.find("body").append(e):t.after(e)}),T())}function D(){v(),w(),M(),O&&(O.remove(),O=null),P&&(P.$destroy(),P=null)}function $(){z.title=a[c+"Title"],j?z.content=j(e):z.content=a[i],z.popupClass=a[c+"Class"],z.placement=angular.isDefined(a[c+"Placement"])?a[c+"Placement"]:f.placement;var t=l.parsePlacement(z.placement);_=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(a[c+"PopupDelay"],10),o=parseInt(a[c+"PopupCloseDelay"],10);z.popupDelay=isNaN(n)?f.popupDelay:n,z.popupCloseDelay=isNaN(o)?f.popupCloseDelay:o}function x(t){Y&&angular.isFunction(Y.assign)&&Y.assign(e,t)}function T(){L.length=0,j?(L.push(e.$watch(j,function(e){z.content=e,!e&&z.isOpen&&y()})),L.push(P.$watch(function(){H||(H=!0,P.$$postDigest(function(){H=!1,z&&z.isOpen&&V()}))}))):L.push(a.$observe(i,function(e){z.content=e,!e&&z.isOpen?y():V()})),L.push(a.$observe(c+"Title",function(e){z.title=e,z.isOpen&&V()})),L.push(a.$observe(c+"Placement",function(e){z.placement=e?e:f.placement;var t=l.parsePlacement(z.placement);_=t[1]?t[0]+"-"+t[1]:t[0],z.isOpen&&V()}))}function M(){L.length&&(angular.forEach(L,function(e){e()}),L.length=0)}function S(e){z&&z.isOpen&&O&&(t[0].contains(e.target)||O[0].contains(e.target)||g())}function C(){var e=a[c+"Trigger"];R(),W=h(e),"none"!==W.show&&W.show.forEach(function(e,n){"outsideClick"===e?(t.on("click",u),s.on("click",S)):e===W.hide[n]?t.on(e,u):e&&(t.on(e,p),t.on(W.hide[n],g)),t.on("keypress",function(e){27===e.which&&g()})})}var O,P,I,F,A,E,_,N=angular.isDefined(f.appendToBody)?f.appendToBody:!1,W=h(void 0),U=angular.isDefined(a[c+"Enable"]),z=e.$new(!0),H=!1,Y=angular.isDefined(a[c+"IsOpen"])?d(a[c+"IsOpen"]):!1,j=f.useContentExp?d(a[i]):!1,L=[],V=function(){O&&O.html()&&(E||(E=r(function(){var e=l.positionElements(t,O,z.placement,N);O.css({top:e.top+"px",left:e.left+"px"}),O.hasClass(e.placement.split("-")[0])||(O.removeClass(_.split("-")[0]),O.addClass(e.placement.split("-")[0])),O.hasClass(f.placementClassPrefix+e.placement)||(O.removeClass(f.placementClassPrefix+_),O.addClass(f.placementClassPrefix+e.placement)),O.hasClass("uib-position-measure")?(l.positionArrow(O,e.placement),O.removeClass("uib-position-measure")):_!==e.placement&&l.positionArrow(O,e.placement),_=e.placement,E=null},0,!1)))};z.origScope=e,z.isOpen=!1,m.add(z,{close:y}),z.contentExp=function(){return z.content},a.$observe("disabled",function(e){e&&v(),e&&z.isOpen&&y()}),Y&&e.$watch(Y,function(e){z&&!e===z.isOpen&&u()});var R=function(){W.show.forEach(function(e){"outsideClick"===e?t.off("click",u):(t.off(e,p),t.off(e,u))}),W.hide.forEach(function(e){"outsideClick"===e?s.off("click",S):t.off(e,g)})};C();var q=e.$eval(a[c+"Animation"]);z.animation=angular.isDefined(q)?!!q:f.animation;var B,J=c+"AppendToBody";B=J in a&&void 0===a[J]?!0:e.$eval(a[J]),N=angular.isDefined(B)?B:N,e.$on("$destroy",function(){R(),D(),m.remove(z),z=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var s,l,u,c=i.$eval(r.tooltipTemplateTranscludeScope),d=0,p=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),u&&(e.leave(u).then(function(){l=null}),l=u,u=null)};i.$watch(t.parseAsResourceUrl(r.uibTooltipTemplateTransclude),function(t){var r=++d;t?(a(t,!0).then(function(a){if(r===d){var i=c.$new(),l=a,f=n(l)(i,function(t){p(),e.enter(t,o)});s=i,u=f,s.$emit("$includeContentLoaded",t)}},function(){r===d&&(p(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):p()}),i.$on("$destroy",p)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,a){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation()&&n.addClass(a.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){function a(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}var i=this,o=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=a(),this.addBar=function(e,t,n){o||t.css({transition:"none"}),this.bars.push(e),e.max=a(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){var t=i.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,i.removeBar(e)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){i.bars.forEach(function(e){e.max=a(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var a={$setViewValue:angular.noop},i=this;this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&a.$viewValue===t?0:t;a.$setViewValue(n),a.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){function t(e){for(var t=0;t<a.tabs.length;t++)if(a.tabs[t].index===e)return t}var n,a=this;a.tabs=[],a.select=function(e,o){if(!i){var r=t(n),s=a.tabs[r];s&&(s.tab.onDeselect({$event:o}),s.tab.active=!1);var l=a.tabs[e];l?(l.tab.onSelect({$event:o}),l.tab.active=!0,a.active=l.index,n=l.index):!l&&angular.isNumber(n)&&(a.active=null,n=null)}},a.addTab=function(e){if(a.tabs.push({tab:e,index:e.index}),a.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===a.active||!angular.isNumber(a.active)&&1===a.tabs.length){var n=t(e.index);a.select(n)}},a.removeTab=function(e){var n=t(e.index);if(e.index===a.active){var i=n===a.tabs.length-1?n-1:n+1%a.tabs.length;a.select(i)}a.tabs.splice(n,1)},e.$watch("tabset.active",function(e){angular.isNumber(e)&&e!==n&&a.select(t(e))});var i;e.$on("$destroy",function(){i=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1,angular.isUndefined(n.active)&&(e.active=0)}}}).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,a,i,o){t.disabled=!1,a.disable&&t.$parent.$watch(e(a.disable),function(e){t.disabled=!!e}),angular.isUndefined(a.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:t.index=0),angular.isUndefined(a.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,a=0;a<i.tabs.length;a++)if(i.tabs[a].tab===t){n=a;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(t,n,a){var i=t.$eval(a.uibTabContentTransclude).tab;i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,a,i,o,r){function s(){var t=+e.hours,n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===w[1]&&(t+=12)),t):void 0}function l(){var t=+e.minutes;return t>=0&&60>t?t:void 0}function u(){var t=+e.seconds;return t>=0&&60>t?t:void 0}function c(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function d(e){p(),y.$setViewValue(new Date(b)),f(e)}function p(){y.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function f(t){if(y.$modelValue){var n=b.getHours(),a=b.getMinutes(),i=b.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:c(n,!k),"m"!==t&&(e.minutes=c(a)),e.meridian=b.getHours()<12?w[0]:w[1],"s"!==t&&(e.seconds=c(i)),e.meridian=b.getHours()<12?w[0]:w[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=w[0]}function m(e){b=g(b,e),d()}function h(e,t){return g(e,60*t)}function g(e,t){var n=new Date(e.getTime()+1e3*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),a}var b=new Date,v=[],y={$setViewValue:angular.noop},w=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):r.meridians||o.DATETIME_FORMATS.AMPMS,k=angular.isDefined(n.padHours)?e.$parent.$eval(n.padHours):!0;e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),this.init=function(t,a){y=t,y.$render=this.render,y.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),o=a.eq(1),s=a.eq(2),l=angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):r.mousewheel;l&&this.setupMousewheelEvents(i,o,s);var u=angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):r.arrowkeys;u&&this.setupArrowkeyEvents(i,o,s),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o,s)};var D=r.hourStep;n.hourStep&&v.push(e.$parent.$watch(a(n.hourStep),function(e){D=+e}));var $=r.minuteStep;n.minuteStep&&v.push(e.$parent.$watch(a(n.minuteStep),function(e){$=+e}));var x;v.push(e.$parent.$watch(a(n.min),function(e){var t=new Date(e);x=isNaN(t)?void 0:t}));var T;v.push(e.$parent.$watch(a(n.max),function(e){var t=new Date(e);T=isNaN(t)?void 0:t}));var M=!1;n.ngDisabled&&v.push(e.$parent.$watch(a(n.ngDisabled),function(e){M=e})),e.noIncrementHours=function(){var e=h(b,60*D);return M||e>T||b>e&&x>e},e.noDecrementHours=function(){var e=h(b,60*-D);return M||x>e||e>b&&e>T},e.noIncrementMinutes=function(){var e=h(b,$);return M||e>T||b>e&&x>e},e.noDecrementMinutes=function(){var e=h(b,-$);return M||x>e||e>b&&e>T},e.noIncrementSeconds=function(){var e=g(b,S);return M||e>T||b>e&&x>e},e.noDecrementSeconds=function(){var e=g(b,-S);return M||x>e||e>b&&e>T},e.noToggleMeridian=function(){return b.getHours()<12?M||h(b,720)>T:M||h(b,-720)<x};var S=r.secondStep;n.secondStep&&v.push(e.$parent.$watch(a(n.secondStep),function(e){S=+e})),e.showSeconds=r.showSeconds,n.showSeconds&&v.push(e.$parent.$watch(a(n.showSeconds),function(t){e.showSeconds=!!t})),e.showMeridian=r.showMeridian,n.showMeridian&&v.push(e.$parent.$watch(a(n.showMeridian),function(t){if(e.showMeridian=!!t,y.$error.time){var n=s(),a=l();angular.isDefined(n)&&angular.isDefined(a)&&(b.setHours(n),d())}else f()})),this.setupMousewheelEvents=function(t,n,a){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()}),a.bind("mousewheel wheel",function(t){M||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n,a){t.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))}),n.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))}),a.bind("keydown",function(t){M||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))})},this.setupInputEvents=function(t,n,a){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,a){y.$setViewValue(null),y.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n),angular.isDefined(a)&&(e.invalidSeconds=a)};e.updateHours=function(){var e=s(),t=l();y.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(b.setHours(e),b.setMinutes(t),x>b||b>T?i(!0):d("h")):i(!0)},t.bind("blur",function(t){y.$setTouched(),null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=c(e.hours,!k)})}),e.updateMinutes=function(){var e=l(),t=s();
y.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(b.setHours(t),b.setMinutes(e),x>b||b>T?i(void 0,!0):d("m")):i(void 0,!0)},n.bind("blur",function(t){y.$setTouched(),null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=c(e.minutes)})}),e.updateSeconds=function(){var e=u();y.$setDirty(),angular.isDefined(e)?(b.setSeconds(e),d("s")):i(void 0,void 0,!0)},a.bind("blur",function(t){!e.invalidSeconds&&e.seconds<10&&e.$apply(function(){e.seconds=c(e.seconds)})})},this.render=function(){var t=y.$viewValue;isNaN(t)?(y.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(b=t),x>b||b>T?(y.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):p(),f())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):r.showSpinners,e.incrementHours=function(){e.noIncrementHours()||m(60*D*60)},e.decrementHours=function(){e.noDecrementHours()||m(60*-D*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||m(60*$)},e.decrementMinutes=function(){e.noDecrementMinutes()||m(60*-$)},e.incrementSeconds=function(){e.noIncrementSeconds()||m(S)},e.decrementSeconds=function(){e.noDecrementSeconds()||m(-S)},e.toggleMeridian=function(){var t=l(),n=s();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?m(720*(b.getHours()<12?60:-60)):e.meridian=e.meridian===w[0]?w[1]:w[0])},e.blur=function(){y.$setTouched()},e.$on("$destroy",function(){for(;v.length;)v.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],controller:"UibTimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,a,i,o,r,s,l,u,c,d,p){function f(){z.moveInProgress||(z.moveInProgress=!0,z.$digest()),K()}function m(){z.position=O?d.offset(t):d.position(t),z.position.top+=t.prop("offsetHeight")}var h,g,b=[9,13,27,38,40],v=200,y=e.$eval(n.typeaheadMinLength);y||0===y||(y=1),e.$watch(n.typeaheadMinLength,function(e){y=e||0===e?e:1});var w=e.$eval(n.typeaheadWaitMs)||0,k=e.$eval(n.typeaheadEditable)!==!1;e.$watch(n.typeaheadEditable,function(e){k=e!==!1});var D,$,x=i(n.typeaheadLoading).assign||angular.noop,T=i(n.typeaheadOnSelect),M=angular.isDefined(n.typeaheadSelectOnBlur)?e.$eval(n.typeaheadSelectOnBlur):!1,S=i(n.typeaheadNoResults).assign||angular.noop,C=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,O=n.typeaheadAppendToBody?e.$eval(n.typeaheadAppendToBody):!1,P=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,I=e.$eval(n.typeaheadFocusFirst)!==!1,F=n.typeaheadSelectOnExact?e.$eval(n.typeaheadSelectOnExact):!1,A=i(n.typeaheadIsOpen).assign||angular.noop,E=e.$eval(n.typeaheadShowHint)||!1,_=i(n.ngModel),N=i(n.ngModel+"($$$p)"),W=function(t,n){return angular.isFunction(_(e))&&g&&g.$options&&g.$options.getterSetter?N(t,{$$$p:n}):_.assign(t,n)},U=p.parse(n.uibTypeahead),z=e.$new(),H=e.$on("$destroy",function(){z.$destroy()});z.$on("$destroy",H);var Y="typeahead-"+z.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":Y});var j,L;E&&(j=angular.element("<div></div>"),j.css("position","relative"),t.after(j),L=t.clone(),L.attr("placeholder",""),L.attr("tabindex","-1"),L.val(""),L.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),j.append(L),L.after(t));var V=angular.element("<div uib-typeahead-popup></div>");V.attr({id:Y,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&V.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&V.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var R=function(){E&&L.val("")},q=function(){z.matches=[],z.activeIdx=-1,t.attr("aria-expanded",!1),R()},B=function(e){return Y+"-option-"+e};z.$watch("activeIdx",function(e){0>e?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",B(e))});var J=function(e,t){return z.matches.length>t&&e?e.toUpperCase()===z.matches[t].label.toUpperCase():!1},G=function(n,a){var i={$viewValue:n};x(e,!0),S(e,!1),o.when(U.source(e,i)).then(function(o){var r=n===h.$viewValue;if(r&&D)if(o&&o.length>0){z.activeIdx=I?0:-1,S(e,!1),z.matches.length=0;for(var s=0;s<o.length;s++)i[U.itemName]=o[s],z.matches.push({id:B(s),label:U.viewMapper(z,i),model:o[s]});if(z.query=n,m(),t.attr("aria-expanded",!0),F&&1===z.matches.length&&J(n,0)&&(angular.isNumber(z.debounceUpdate)||angular.isObject(z.debounceUpdate)?c(function(){z.select(0,a)},angular.isNumber(z.debounceUpdate)?z.debounceUpdate:z.debounceUpdate["default"]):z.select(0,a)),E){var l=z.matches[0].label;angular.isString(n)&&n.length>0&&l.slice(0,n.length).toUpperCase()===n.toUpperCase()?L.val(n+l.slice(n.length)):L.val("")}}else q(),S(e,!0);r&&x(e,!1)},function(){q(),x(e,!1),S(e,!0)})};O&&(angular.element(l).on("resize",f),s.find("body").on("scroll",f));var K=c(function(){z.matches.length&&m(),z.moveInProgress=!1},v);z.moveInProgress=!1,z.query=void 0;var X,Q=function(e){X=r(function(){G(e)},w)},Z=function(){X&&r.cancel(X)};q(),z.assignIsOpen=function(t){A(e,t)},z.select=function(a,i){var o,s,l={};$=!0,l[U.itemName]=s=z.matches[a].model,o=U.modelMapper(e,l),W(e,o),h.$setValidity("editable",!0),h.$setValidity("parse",!0),T(e,{$item:s,$model:o,$label:U.viewMapper(e,l),$event:i}),q(),z.$eval(n.typeaheadFocusOnSelect)!==!1&&r(function(){t[0].focus()},0,!1)},t.on("keydown",function(t){if(0!==z.matches.length&&-1!==b.indexOf(t.which)){if(-1===z.activeIdx&&(9===t.which||13===t.which)||9===t.which&&t.shiftKey)return q(),void z.$digest();t.preventDefault();var n;switch(t.which){case 9:case 13:z.$apply(function(){angular.isNumber(z.debounceUpdate)||angular.isObject(z.debounceUpdate)?c(function(){z.select(z.activeIdx,t)},angular.isNumber(z.debounceUpdate)?z.debounceUpdate:z.debounceUpdate["default"]):z.select(z.activeIdx,t)});break;case 27:t.stopPropagation(),q(),e.$digest();break;case 38:z.activeIdx=(z.activeIdx>0?z.activeIdx:z.matches.length)-1,z.$digest(),n=V.find("li")[z.activeIdx],n.parentNode.scrollTop=n.offsetTop;break;case 40:z.activeIdx=(z.activeIdx+1)%z.matches.length,z.$digest(),n=V.find("li")[z.activeIdx],n.parentNode.scrollTop=n.offsetTop}}}),t.bind("focus",function(e){D=!0,0!==y||h.$viewValue||r(function(){G(h.$viewValue,e)},0)}),t.bind("blur",function(e){M&&z.matches.length&&-1!==z.activeIdx&&!$&&($=!0,z.$apply(function(){angular.isObject(z.debounceUpdate)&&angular.isNumber(z.debounceUpdate.blur)?c(function(){z.select(z.activeIdx,e)},z.debounceUpdate.blur):z.select(z.activeIdx,e)})),!k&&h.$error.editable&&(h.$viewValue="",h.$setValidity("editable",!0),h.$setValidity("parse",!0),t.val("")),D=!1,$=!1});var ee=function(n){t[0]!==n.target&&3!==n.which&&0!==z.matches.length&&(q(),u.$$phase||e.$digest())};s.on("click",ee),e.$on("$destroy",function(){s.off("click",ee),(O||P)&&te.remove(),O&&(angular.element(l).off("resize",f),s.find("body").off("scroll",f)),V.remove(),E&&j.remove()});var te=a(V)(z);O?s.find("body").append(te):P?angular.element(P).eq(0).append(te):t.after(te),this.init=function(t,n){h=t,g=n,z.debounceUpdate=h.$options&&i(h.$options.debounce)(e),h.$parsers.unshift(function(t){return D=!0,0===y||t&&t.length>=y?w>0?(Z(),Q(t)):G(t):(x(e,!1),Z(),q()),k?t:t?void h.$setValidity("editable",!1):(h.$setValidity("editable",!0),null)}),h.$formatters.push(function(t){var n,a,i={};return k||h.$setValidity("editable",!0),C?(i.$model=t,C(e,i)):(i[U.itemName]=t,n=U.viewMapper(e,i),i[U.itemName]=void 0,a=U.viewMapper(e,i),n!==a?n:t)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(e,t,n,a){a[2].init(a[0],a[1])}}}).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,a){t.templateUrl=a.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,a){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e(function(){t.select({activeIdx:n,evt:a})},angular.isNumber(i)?i:i["default"]):t.select({activeIdx:n,evt:a})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"uib/template/typeahead/typeahead-match.html";e(r).then(function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(a)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,r){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=r?(""+t).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div class="panel" ng-class="panelClass || \'panel-default\'">\n  <div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n    <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n  <div class="carousel-inner" ng-transclude></div>\n  <a role="button" href class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n    <span class="sr-only">previous</span>\n  </a>\n  <a role="button" href class="right carousel-control" ng-click="next()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n    <span class="sr-only">next</span>\n  </a>\n  <ol class="carousel-indicators" ng-show="slides.length > 1">\n    <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n      <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n    </li>\n  </ol>\n</div>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div class="uib-datepicker" ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table class="uib-daypicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table class="uib-monthpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/popup.html",'<div>\n  <ul class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n    <li ng-transclude></li>\n    <li ng-if="showButtonBar" class="uib-button-bar">\n      <span class="btn-group pull-left">\n        <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n        <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n      </span>\n      <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n    </li>\n  </ul>\n</div>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table class="uib-yearpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/backdrop.html",'<div class="modal-backdrop"\n     uib-modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    uib-modal-animation-class="fade"\n    modal-in-class="in"\n    ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}">\n    <div class="modal-dialog {{size ? \'modal-\' + size : \'\'}}"><div class="modal-content" uib-modal-transclude></div></div>\n</div>\n')}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    uib-tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        uib-tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input style="width:50px;" type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){
e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0}),function(e,t){"use strict";if("function"==typeof define&&define.amd)define(["angular"],t);else{if("undefined"==typeof module||"object"!=typeof module.exports)return t(e.angular);module.exports=t(require("angular"))}}(this,function(e){function t(t,n,a){t.data=e.copy(a),t.ok=function(e){n.close(e)},t.cancel=function(t){e.isUndefined(t)&&(t="cancel"),n.dismiss(t)}}function n(t,n){return function(a,i){var o=e.copy(n);return i=e.extend(o,i||{}),a=e.extend({},i.defaultLabels,a||{}),"templateUrl"in i&&"template"in i&&delete i.template,i.resolve={data:function(){return a}},t.open(i).result}}function a(t){return{priority:1,restrict:"A",scope:{confirmIf:"=",ngClick:"&",confirm:"@",confirmSettings:"=",confirmTitle:"@",confirmOk:"@",confirmCancel:"@"},link:function(n,a,i){a.unbind("click").bind("click",function(a){if(a.preventDefault(),e.isUndefined(n.confirmIf)||n.confirmIf){var i={text:n.confirm};n.confirmTitle&&(i.title=n.confirmTitle),n.confirmOk&&(i.ok=n.confirmOk),n.confirmCancel&&(i.cancel=n.confirmCancel),t(i,n.confirmSettings||{}).then(n.ngClick)}else n.$apply(n.ngClick)})}}}e.module("angular-confirm",["ui.bootstrap.modal"]).controller("ConfirmModalController",t).value("$confirmModalDefaults",{template:'<div class="modal-header" ng-enter="ok()"><h3 class="modal-title">{{data.title}}</h3></div><div class="modal-body">{{data.text}}</div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()" focused="true">{{data.ok}}</button><button class="btn btn-default" ng-click="cancel()">{{data.cancel}}</button></div>',controller:"ConfirmModalController",defaultLabels:{title:"Confirm",ok:"OK",cancel:"Cancel"}}).factory("$confirm",n).directive("confirm",a),t.$inject=["$scope","$uibModalInstance","data"],n.$inject=["$uibModal","$confirmModalDefaults"],a.$inject=["$confirm"]});var DateFormatter;!function(){"use strict";var e,t,n,a,i,o;i=864e5,o=3600,e=function(e,t){return"string"==typeof e&&"string"==typeof t&&e.toLowerCase()===t.toLowerCase()},t=function(e,n,a){var i=a||"0",o=e.toString();return o.length<n?t(i+o,n):o},n=function(e){var t,a;for(e=e||{},t=1;t<arguments.length;t++)if(a=arguments[t])for(var i in a)a.hasOwnProperty(i)&&("object"==typeof a[i]?n(e[i],a[i]):e[i]=a[i]);return e},a={dateSettings:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],meridiem:["AM","PM"],ordinal:function(e){var t=e%10,n={1:"st",2:"nd",3:"rd"};return 1!==Math.floor(e%100/10)&&n[t]?n[t]:"th"}},separators:/[ \-+\/\.T:@]/g,validParts:/[dDjlNSwzWFmMntLoYyaABgGhHisueTIOPZcrU]/g,intParts:/[djwNzmnyYhHgGis]/g,tzParts:/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,tzClip:/[^-+\dA-Z]/g},DateFormatter=function(e){var t=this,i=n(a,e);t.dateSettings=i.dateSettings,t.separators=i.separators,t.validParts=i.validParts,t.intParts=i.intParts,t.tzParts=i.tzParts,t.tzClip=i.tzClip},DateFormatter.prototype={constructor:DateFormatter,parseDate:function(t,n){var a,i,o,r,s,l,u,c,d,p,f=this,m=!1,h=!1,g=f.dateSettings,b={date:null,year:null,month:null,day:null,hour:0,min:0,sec:0};if(t){if(t instanceof Date)return t;if("number"==typeof t)return new Date(t);if("U"===n)return o=parseInt(t),o?new Date(1e3*o):t;if("string"!=typeof t)return"";if(a=n.match(f.validParts),!a||0===a.length)throw new Error("Invalid date format definition.");for(i=t.replace(f.separators,"\x00").split("\x00"),o=0;o<i.length;o++)switch(r=i[o],s=parseInt(r),a[o]){case"y":case"Y":d=r.length,2===d?b.year=parseInt((70>s?"20":"19")+r):4===d&&(b.year=s),m=!0;break;case"m":case"n":case"M":case"F":isNaN(r)?(l=g.monthsShort.indexOf(r),l>-1&&(b.month=l+1),l=g.months.indexOf(r),l>-1&&(b.month=l+1)):s>=1&&12>=s&&(b.month=s),m=!0;break;case"d":case"j":s>=1&&31>=s&&(b.day=s),m=!0;break;case"g":case"h":u=a.indexOf("a")>-1?a.indexOf("a"):a.indexOf("A")>-1?a.indexOf("A"):-1,p=i[u],u>-1?(c=e(p,g.meridiem[0])?0:e(p,g.meridiem[1])?12:-1,s>=1&&12>=s&&c>-1?b.hour=s+c-1:s>=0&&23>=s&&(b.hour=s)):s>=0&&23>=s&&(b.hour=s),h=!0;break;case"G":case"H":s>=0&&23>=s&&(b.hour=s),h=!0;break;case"i":s>=0&&59>=s&&(b.min=s),h=!0;break;case"s":s>=0&&59>=s&&(b.sec=s),h=!0}if(m===!0&&b.year&&b.month&&b.day)b.date=new Date(b.year,b.month-1,b.day,b.hour,b.min,b.sec,0);else{if(h!==!0)return!1;b.date=new Date(0,0,0,b.hour,b.min,b.sec,0)}return b.date}},guessDate:function(e,t){if("string"!=typeof e)return e;var n,a,i,o,r=this,s=e.replace(r.separators,"\x00").split("\x00"),l=/^[djmn]/g,u=t.match(r.validParts),c=new Date,d=0;if(!l.test(u[0]))return e;for(a=0;a<s.length;a++){switch(d=2,i=s[a],o=parseInt(i.substr(0,2)),a){case 0:"m"===u[0]||"n"===u[0]?c.setMonth(o-1):c.setDate(o);break;case 1:"m"===u[0]||"n"===u[0]?c.setDate(o):c.setMonth(o-1);break;case 2:n=c.getFullYear(),i.length<4?(c.setFullYear(parseInt(n.toString().substr(0,4-i.length)+i)),d=i.length):(c.setFullYear=parseInt(i.substr(0,4)),d=4);break;case 3:c.setHours(o);break;case 4:c.setMinutes(o);break;case 5:c.setSeconds(o)}i.substr(d).length>0&&s.splice(a+1,0,i.substr(d))}return c},parseFormat:function(e,n){var a,r=this,s=r.dateSettings,l=/\\?(.?)/gi,u=function(e,t){return a[e]?a[e]():t};return a={d:function(){return t(a.j(),2)},D:function(){return s.daysShort[a.w()]},j:function(){return n.getDate()},l:function(){return s.days[a.w()]},N:function(){return a.w()||7},w:function(){return n.getDay()},z:function(){var e=new Date(a.Y(),a.n()-1,a.j()),t=new Date(a.Y(),0,1);return Math.round((e-t)/i)},W:function(){var e=new Date(a.Y(),a.n()-1,a.j()-a.N()+3),n=new Date(e.getFullYear(),0,4);return t(1+Math.round((e-n)/i/7),2)},F:function(){return s.months[n.getMonth()]},m:function(){return t(a.n(),2)},M:function(){return s.monthsShort[n.getMonth()]},n:function(){return n.getMonth()+1},t:function(){return new Date(a.Y(),a.n(),0).getDate()},L:function(){var e=a.Y();return e%4===0&&e%100!==0||e%400===0?1:0},o:function(){var e=a.n(),t=a.W(),n=a.Y();return n+(12===e&&9>t?1:1===e&&t>9?-1:0)},Y:function(){return n.getFullYear()},y:function(){return a.Y().toString().slice(-2)},a:function(){return a.A().toLowerCase()},A:function(){var e=a.G()<12?0:1;return s.meridiem[e]},B:function(){var e=n.getUTCHours()*o,a=60*n.getUTCMinutes(),i=n.getUTCSeconds();return t(Math.floor((e+a+i+o)/86.4)%1e3,3)},g:function(){return a.G()%12||12},G:function(){return n.getHours()},h:function(){return t(a.g(),2)},H:function(){return t(a.G(),2)},i:function(){return t(n.getMinutes(),2)},s:function(){return t(n.getSeconds(),2)},u:function(){return t(1e3*n.getMilliseconds(),6)},e:function(){var e=/\((.*)\)/.exec(String(n))[1];return e||"Coordinated Universal Time"},T:function(){var e=(String(n).match(r.tzParts)||[""]).pop().replace(r.tzClip,"");return e||"UTC"},I:function(){var e=new Date(a.Y(),0),t=Date.UTC(a.Y(),0),n=new Date(a.Y(),6),i=Date.UTC(a.Y(),6);return e-t!==n-i?1:0},O:function(){var e=n.getTimezoneOffset(),a=Math.abs(e);return(e>0?"-":"+")+t(100*Math.floor(a/60)+a%60,4)},P:function(){var e=a.O();return e.substr(0,3)+":"+e.substr(3,2)},Z:function(){return 60*-n.getTimezoneOffset()},c:function(){return"Y-m-d\\TH:i:sP".replace(l,u)},r:function(){return"D, d M Y H:i:s O".replace(l,u)},U:function(){return n.getTime()/1e3||0}},u(e,e)},formatDate:function(e,t){var n,a,i,o,r,s=this,l="";if("string"==typeof e&&(e=s.parseDate(e,t),e===!1))return!1;if(e instanceof Date){for(i=t.length,n=0;i>n;n++)r=t.charAt(n),"S"!==r&&(o=s.parseFormat(r,e),n!==i-1&&s.intParts.test(r)&&"S"===t.charAt(n+1)&&(a=parseInt(o),o+=s.dateSettings.ordinal(a)),l+=o);return l}return""}}}(),function(e){"function"==typeof define&&define.amd?define(["jquery","jquery-mousewheel","date-functions"],e):"object"==typeof exports?module.exports=e:e(jQuery)}(function(e){"use strict";function t(e,t,n){this.date=e,this.desc=t,this.style=n}var n={i18n:{ar:{months:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],dayOfWeekShort:["ن","ث","ع","خ","ج","س","ح"],dayOfWeek:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت","الأحد"]},ro:{months:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],dayOfWeekShort:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],dayOfWeek:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"]},id:{months:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"],dayOfWeekShort:["Min","Sen","Sel","Rab","Kam","Jum","Sab"],dayOfWeek:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"]},is:{months:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],dayOfWeekShort:["Sun","Mán","Þrið","Mið","Fim","Fös","Lau"],dayOfWeek:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"]},bg:{months:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],dayOfWeekShort:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],dayOfWeek:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"]},fa:{months:["فروردین","اردیبهشت","خرداد","تیر","مرداد","شهریور","مهر","آبان","آذر","دی","بهمن","اسفند"],dayOfWeekShort:["یکشنبه","دوشنبه","سه شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayOfWeek:["یک‌شنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنج‌شنبه","جمعه","شنبه","یک‌شنبه"]},ru:{months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],dayOfWeekShort:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],dayOfWeek:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},uk:{months:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],dayOfWeekShort:["Ндл","Пнд","Втр","Срд","Чтв","Птн","Сбт"],dayOfWeek:["Неділя","Понеділок","Вівторок","Середа","Четвер","П'ятниця","Субота"]},en:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],dayOfWeekShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayOfWeek:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},el:{months:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],dayOfWeekShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayOfWeek:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"]},de:{months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],dayOfWeekShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayOfWeek:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"]},nl:{months:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],dayOfWeekShort:["zo","ma","di","wo","do","vr","za"],dayOfWeek:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"]},tr:{months:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],dayOfWeekShort:["Paz","Pts","Sal","Çar","Per","Cum","Cts"],dayOfWeek:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"]},fr:{months:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],dayOfWeekShort:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"],dayOfWeek:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"]},es:{months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],dayOfWeekShort:["Dom","Lun","Mar","Mié","Jue","Vie","Sáb"],dayOfWeek:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"]},th:{months:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],dayOfWeekShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayOfWeek:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัส","ศุกร์","เสาร์","อาทิตย์"]},pl:{months:["styczeń","luty","marzec","kwiecień","maj","czerwiec","lipiec","sierpień","wrzesień","październik","listopad","grudzień"],dayOfWeekShort:["nd","pn","wt","śr","cz","pt","sb"],dayOfWeek:["niedziela","poniedziałek","wtorek","środa","czwartek","piątek","sobota"]},pt:{months:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],dayOfWeekShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sab"],dayOfWeek:["Domingo","Segunda","Terça","Quarta","Quinta","Sexta","Sábado"]},ch:{months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayOfWeekShort:["日","一","二","三","四","五","六"]},se:{months:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],dayOfWeekShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"]},kr:{months:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayOfWeekShort:["일","월","화","수","목","금","토"],dayOfWeek:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"]},it:{months:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],dayOfWeekShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayOfWeek:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"]},da:{months:["January","Februar","Marts","April","Maj","Juni","July","August","September","Oktober","November","December"],dayOfWeekShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayOfWeek:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"]},no:{months:["Januar","Februar","Mars","April","Mai","Juni","Juli","August","September","Oktober","November","Desember"],dayOfWeekShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayOfWeek:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"]},ja:{months:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayOfWeekShort:["日","月","火","水","木","金","土"],dayOfWeek:["日曜","月曜","火曜","水曜","木曜","金曜","土曜"]},vi:{months:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayOfWeekShort:["CN","T2","T3","T4","T5","T6","T7"],dayOfWeek:["Chủ nhật","Thứ hai","Thứ ba","Thứ tư","Thứ năm","Thứ sáu","Thứ bảy"]},sl:{months:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],dayOfWeekShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayOfWeek:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"]},cs:{months:["Leden","Únor","Březen","Duben","Květen","Červen","Červenec","Srpen","Září","Říjen","Listopad","Prosinec"],dayOfWeekShort:["Ne","Po","Út","St","Čt","Pá","So"]},hu:{months:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],dayOfWeekShort:["Va","Hé","Ke","Sze","Cs","Pé","Szo"],dayOfWeek:["vasárnap","hétfő","kedd","szerda","csütörtök","péntek","szombat"]},az:{months:["Yanvar","Fevral","Mart","Aprel","May","Iyun","Iyul","Avqust","Sentyabr","Oktyabr","Noyabr","Dekabr"],dayOfWeekShort:["B","Be","Ça","Ç","Ca","C","Ş"],dayOfWeek:["Bazar","Bazar ertəsi","Çərşənbə axşamı","Çərşənbə","Cümə axşamı","Cümə","Şənbə"]},bs:{months:["Januar","Februar","Mart","April","Maj","Jun","Jul","Avgust","Septembar","Oktobar","Novembar","Decembar"],dayOfWeekShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayOfWeek:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"]},ca:{months:["Gener","Febrer","Març","Abril","Maig","Juny","Juliol","Agost","Setembre","Octubre","Novembre","Desembre"],dayOfWeekShort:["Dg","Dl","Dt","Dc","Dj","Dv","Ds"],dayOfWeek:["Diumenge","Dilluns","Dimarts","Dimecres","Dijous","Divendres","Dissabte"]},"en-GB":{months:["January","February","March","April","May","June","July","August","September","October","November","December"],dayOfWeekShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayOfWeek:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},et:{months:["Jaanuar","Veebruar","Märts","Aprill","Mai","Juuni","Juuli","August","September","Oktoober","November","Detsember"],dayOfWeekShort:["P","E","T","K","N","R","L"],dayOfWeek:["Pühapäev","Esmaspäev","Teisipäev","Kolmapäev","Neljapäev","Reede","Laupäev"]},eu:{months:["Urtarrila","Otsaila","Martxoa","Apirila","Maiatza","Ekaina","Uztaila","Abuztua","Iraila","Urria","Azaroa","Abendua"],dayOfWeekShort:["Ig.","Al.","Ar.","Az.","Og.","Or.","La."],dayOfWeek:["Igandea","Astelehena","Asteartea","Asteazkena","Osteguna","Ostirala","Larunbata"]},fi:{months:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],dayOfWeekShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayOfWeek:["sunnuntai","maanantai","tiistai","keskiviikko","torstai","perjantai","lauantai"]},gl:{months:["Xan","Feb","Maz","Abr","Mai","Xun","Xul","Ago","Set","Out","Nov","Dec"],dayOfWeekShort:["Dom","Lun","Mar","Mer","Xov","Ven","Sab"],dayOfWeek:["Domingo","Luns","Martes","Mércores","Xoves","Venres","Sábado"]},hr:{months:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],dayOfWeekShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayOfWeek:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"]},ko:{months:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayOfWeekShort:["일","월","화","수","목","금","토"],dayOfWeek:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"]},lt:{months:["Sausio","Vasario","Kovo","Balandžio","Gegužės","Birželio","Liepos","Rugpjūčio","Rugsėjo","Spalio","Lapkričio","Gruodžio"],dayOfWeekShort:["Sek","Pir","Ant","Tre","Ket","Pen","Šeš"],dayOfWeek:["Sekmadienis","Pirmadienis","Antradienis","Trečiadienis","Ketvirtadienis","Penktadienis","Šeštadienis"]},lv:{months:["Janvāris","Februāris","Marts","Aprīlis ","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],dayOfWeekShort:["Sv","Pr","Ot","Tr","Ct","Pk","St"],dayOfWeek:["Svētdiena","Pirmdiena","Otrdiena","Trešdiena","Ceturtdiena","Piektdiena","Sestdiena"]},mk:{months:["јануари","февруари","март","април","мај","јуни","јули","август","септември","октомври","ноември","декември"],dayOfWeekShort:["нед","пон","вто","сре","чет","пет","саб"],dayOfWeek:["Недела","Понеделник","Вторник","Среда","Четврток","Петок","Сабота"]},mn:{months:["1-р сар","2-р сар","3-р сар","4-р сар","5-р сар","6-р сар","7-р сар","8-р сар","9-р сар","10-р сар","11-р сар","12-р сар"],dayOfWeekShort:["Дав","Мяг","Лха","Пүр","Бсн","Бям","Ням"],dayOfWeek:["Даваа","Мягмар","Лхагва","Пүрэв","Баасан","Бямба","Ням"]},"pt-BR":{months:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],dayOfWeekShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayOfWeek:["Domingo","Segunda","Terça","Quarta","Quinta","Sexta","Sábado"]},sk:{months:["Január","Február","Marec","Apríl","Máj","Jún","Júl","August","September","Október","November","December"],dayOfWeekShort:["Ne","Po","Ut","St","Št","Pi","So"],dayOfWeek:["Nedeľa","Pondelok","Utorok","Streda","Štvrtok","Piatok","Sobota"]},sq:{months:["Janar","Shkurt","Mars","Prill","Maj","Qershor","Korrik","Gusht","Shtator","Tetor","Nëntor","Dhjetor"],dayOfWeekShort:["Die","Hën","Mar","Mër","Enj","Pre","Shtu"],dayOfWeek:["E Diel","E Hënë","E Martē","E Mërkurë","E Enjte","E Premte","E Shtunë"]},"sr-YU":{months:["Januar","Februar","Mart","April","Maj","Jun","Jul","Avgust","Septembar","Oktobar","Novembar","Decembar"],dayOfWeekShort:["Ned","Pon","Uto","Sre","čet","Pet","Sub"],dayOfWeek:["Nedelja","Ponedeljak","Utorak","Sreda","Četvrtak","Petak","Subota"]},sr:{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],dayOfWeekShort:["нед","пон","уто","сре","чет","пет","суб"],dayOfWeek:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"]},sv:{months:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],dayOfWeekShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayOfWeek:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"]},"zh-TW":{months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayOfWeekShort:["日","一","二","三","四","五","六"],dayOfWeek:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"]},zh:{months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayOfWeekShort:["日","一","二","三","四","五","六"],dayOfWeek:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"]},he:{months:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],dayOfWeekShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayOfWeek:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת","ראשון"]},hy:{months:["Հունվար","Փետրվար","Մարտ","Ապրիլ","Մայիս","Հունիս","Հուլիս","Օգոստոս","Սեպտեմբեր","Հոկտեմբեր","Նոյեմբեր","Դեկտեմբեր"],dayOfWeekShort:["Կի","Երկ","Երք","Չոր","Հնգ","Ուրբ","Շբթ"],dayOfWeek:["Կիրակի","Երկուշաբթի","Երեքշաբթի","Չորեքշաբթի","Հինգշաբթի","Ուրբաթ","Շաբաթ"]},kg:{months:["Үчтүн айы","Бирдин айы","Жалган Куран","Чын Куран","Бугу","Кулжа","Теке","Баш Оона","Аяк Оона","Тогуздун айы","Жетинин айы","Бештин айы"],dayOfWeekShort:["Жек","Дүй","Шей","Шар","Бей","Жум","Ише"],dayOfWeek:["Жекшемб","Дүйшөмб","Шейшемб","Шаршемб","Бейшемби","Жума","Ишенб"]},rm:{months:["Schaner","Favrer","Mars","Avrigl","Matg","Zercladur","Fanadur","Avust","Settember","October","November","December"],dayOfWeekShort:["Du","Gli","Ma","Me","Gie","Ve","So"],dayOfWeek:["Dumengia","Glindesdi","Mardi","Mesemna","Gievgia","Venderdi","Sonda"]}},value:"",rtl:!1,format:"Y/m/d H:i",formatTime:"H:i",formatDate:"Y/m/d",startDate:!1,step:60,monthChangeSpinner:!0,closeOnDateSelect:!1,closeOnTimeSelect:!0,closeOnWithoutClick:!0,closeOnInputClick:!0,timepicker:!0,datepicker:!0,weeks:!1,defaultTime:!1,defaultDate:!1,minDate:!1,maxDate:!1,minTime:!1,maxTime:!1,disabledMinTime:!1,disabledMaxTime:!1,allowTimes:[],opened:!1,initTime:!0,inline:!1,theme:"",onSelectDate:function(){},onSelectTime:function(){},onChangeMonth:function(){},onChangeYear:function(){},onChangeDateTime:function(){},onShow:function(){},onClose:function(){},onGenerate:function(){},withoutCopyright:!0,inverseButton:!1,hours12:!1,next:"xdsoft_next",prev:"xdsoft_prev",dayOfWeekStart:0,parentID:"body",timeHeightInTimePicker:25,timepickerScrollbar:!0,todayButton:!0,prevButton:!0,nextButton:!0,defaultSelect:!0,scrollMonth:!0,scrollTime:!0,scrollInput:!0,lazyInit:!1,mask:!1,validateOnBlur:!0,allowBlank:!0,yearStart:1950,yearEnd:2050,monthStart:0,monthEnd:11,style:"",id:"",fixed:!1,roundTime:"round",className:"",weekends:[],highlightedDates:[],highlightedPeriods:[],disabledDates:[],disabledWeekDays:[],yearOffset:0,beforeShowDay:null,enterLikeTab:!0,showApplyButton:!1},a=null,i="en",o="en",r={meridiem:["AM","PM"]},s=function(){var t=n.i18n[o],i={days:t.dayOfWeek,daysShort:t.dayOfWeekShort,months:t.months,monthsShort:e.map(t.months,function(e){return e.substring(0,3)})};a=new DateFormatter({dateSettings:e.extend({},r,i)})};e.datetimepicker={setLocale:function(e){var t=n.i18n[e]?e:i;o!=t&&(o=t,s())},RFC_2822:"D, d M Y H:i:s O",ATOM:"Y-m-dTH:i:sP",ISO_8601:"Y-m-dTH:i:sO",RFC_822:"D, d M y H:i:s O",RFC_850:"l, d-M-y H:i:s T",RFC_1036:"D, d M y H:i:s O",RFC_1123:"D, d M Y H:i:s O",RSS:"D, d M Y H:i:s O",W3C:"Y-m-dTH:i:sP"},s(),window.getComputedStyle||(window.getComputedStyle=function(e,t){return this.el=e,this.getPropertyValue=function(t){var n=/(\-([a-z]){1})/g;return"float"===t&&(t="styleFloat"),n.test(t)&&(t=t.replace(n,function(e,t,n){return n.toUpperCase()})),e.currentStyle[t]||null},this}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e,t){var n,a;for(n=t||0,a=this.length;a>n;n+=1)if(this[n]===e)return n;return-1}),Date.prototype.countDaysInMonth=function(){return new Date(this.getFullYear(),this.getMonth()+1,0).getDate()},e.fn.xdsoftScroller=function(t){return this.each(function(){var n,a,i,o,r,s=e(this),l=function(e){var t,n={x:0,y:0};return"touchstart"===e.type||"touchmove"===e.type||"touchend"===e.type||"touchcancel"===e.type?(t=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0],n.x=t.clientX,n.y=t.clientY):"mousedown"!==e.type&&"mouseup"!==e.type&&"mousemove"!==e.type&&"mouseover"!==e.type&&"mouseout"!==e.type&&"mouseenter"!==e.type&&"mouseleave"!==e.type||(n.x=e.clientX,n.y=e.clientY),n},u=100,c=!1,d=0,p=0,f=0,m=!1,h=0,g=function(){};return"hide"===t?void s.find(".xdsoft_scrollbar").hide():(e(this).hasClass("xdsoft_scroller_box")||(n=s.children().eq(0),a=s[0].clientHeight,i=n[0].offsetHeight,o=e('<div class="xdsoft_scrollbar"></div>'),r=e('<div class="xdsoft_scroller"></div>'),o.append(r),s.addClass("xdsoft_scroller_box").append(o),g=function(e){var t=l(e).y-d+h;0>t&&(t=0),t+r[0].offsetHeight>f&&(t=f-r[0].offsetHeight),s.trigger("scroll_element.xdsoft_scroller",[u?t/u:0])},r.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller",function(n){a||s.trigger("resize_scroll.xdsoft_scroller",[t]),d=l(n).y,h=parseInt(r.css("margin-top"),10),f=o[0].offsetHeight,"mousedown"===n.type||"touchstart"===n.type?(document&&e(document.body).addClass("xdsoft_noselect"),e([document.body,window]).on("touchend mouseup.xdsoft_scroller",function i(){e([document.body,window]).off("touchend mouseup.xdsoft_scroller",i).off("mousemove.xdsoft_scroller",g).removeClass("xdsoft_noselect")}),e(document.body).on("mousemove.xdsoft_scroller",g)):(m=!0,n.stopPropagation(),n.preventDefault())}).on("touchmove",function(e){m&&(e.preventDefault(),g(e))}).on("touchend touchcancel",function(e){m=!1,h=0}),s.on("scroll_element.xdsoft_scroller",function(e,t){a||s.trigger("resize_scroll.xdsoft_scroller",[t,!0]),t=t>1?1:0>t||isNaN(t)?0:t,r.css("margin-top",u*t),setTimeout(function(){n.css("marginTop",-parseInt((n[0].offsetHeight-a)*t,10))},10)}).on("resize_scroll.xdsoft_scroller",function(e,t,l){var c,d;a=s[0].clientHeight,i=n[0].offsetHeight,
c=a/i,d=c*o[0].offsetHeight,c>1?r.hide():(r.show(),r.css("height",parseInt(d>10?d:10,10)),u=o[0].offsetHeight-r[0].offsetHeight,l!==!0&&s.trigger("scroll_element.xdsoft_scroller",[t||Math.abs(parseInt(n.css("marginTop"),10))/(i-a)]))}),s.on("mousewheel",function(e){var t=Math.abs(parseInt(n.css("marginTop"),10));return t-=20*e.deltaY,0>t&&(t=0),s.trigger("scroll_element.xdsoft_scroller",[t/(i-a)]),e.stopPropagation(),!1}),s.on("touchstart",function(e){c=l(e),p=Math.abs(parseInt(n.css("marginTop"),10))}),s.on("touchmove",function(e){if(c){e.preventDefault();var t=l(e);s.trigger("scroll_element.xdsoft_scroller",[(p-(t.y-c.y))/(i-a)])}}),s.on("touchend touchcancel",function(e){c=!1,p=0})),void s.trigger("resize_scroll.xdsoft_scroller",[t]))})},e.fn.datetimepicker=function(i){var r,s,l=48,u=57,c=96,d=105,p=17,f=46,m=13,h=27,g=8,b=37,v=38,y=39,w=40,k=9,D=116,$=65,x=67,T=86,M=90,S=89,C=!1,O=e.isPlainObject(i)||!i?e.extend(!0,{},n,i):e.extend(!0,{},n),P=0,I=function(e){e.on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart",function t(n){e.is(":disabled")||e.data("xdsoft_datetimepicker")||(clearTimeout(P),P=setTimeout(function(){e.data("xdsoft_datetimepicker")||r(e),e.off("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart",t).trigger("open.xdsoft")},100))})};return r=function(n){function r(){var e,t=!1;return O.startDate?t=E.strToDate(O.startDate):(t=O.value||(n&&n.val&&n.val()?n.val():""),t?t=E.strToDateTime(t):O.defaultDate&&(t=E.strToDateTime(O.defaultDate),O.defaultTime&&(e=E.strtotime(O.defaultTime),t.setHours(e.getHours()),t.setMinutes(e.getMinutes())))),t&&E.isValidDate(t)?_.data("changed",!0):t="",t||0}var s,P,I,F,A,E,_=e('<div class="xdsoft_datetimepicker xdsoft_noselect"></div>'),N=e('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>'),W=e('<div class="xdsoft_datepicker active"></div>'),U=e('<div class="xdsoft_mounthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>'),z=e('<div class="xdsoft_calendar"></div>'),H=e('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>'),Y=H.find(".xdsoft_time_box").eq(0),j=e('<div class="xdsoft_time_variant"></div>'),L=e('<button type="button" class="xdsoft_save_selected blue-gradient-button">Save Selected</button>'),V=e('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>'),R=e('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>'),q=!1,B=0,J=0;O.id&&_.attr("id",O.id),O.style&&_.attr("style",O.style),O.weeks&&_.addClass("xdsoft_showweeks"),O.rtl&&_.addClass("xdsoft_rtl"),_.addClass("xdsoft_"+O.theme),_.addClass(O.className),U.find(".xdsoft_month span").after(V),U.find(".xdsoft_year span").after(R),U.find(".xdsoft_month,.xdsoft_year").on("touchstart mousedown.xdsoft",function(t){var n,a,i=e(this).find(".xdsoft_select").eq(0),o=0,r=0,s=i.is(":visible");for(U.find(".xdsoft_select").hide(),E.currentTime&&(o=E.currentTime[e(this).hasClass("xdsoft_month")?"getMonth":"getFullYear"]()),i[s?"hide":"show"](),n=i.find("div.xdsoft_option"),a=0;a<n.length&&n.eq(a).data("value")!==o;a+=1)r+=n[0].offsetHeight;return i.xdsoftScroller(r/(i.children()[0].offsetHeight-i[0].clientHeight)),t.stopPropagation(),!1}),U.find(".xdsoft_select").xdsoftScroller().on("touchstart mousedown.xdsoft",function(e){e.stopPropagation(),e.preventDefault()}).on("touchstart mousedown.xdsoft",".xdsoft_option",function(t){void 0!==E.currentTime&&null!==E.currentTime||(E.currentTime=E.now());var n=E.currentTime.getFullYear();E&&E.currentTime&&E.currentTime[e(this).parent().parent().hasClass("xdsoft_monthselect")?"setMonth":"setFullYear"](e(this).data("value")),e(this).parent().parent().hide(),_.trigger("xchange.xdsoft"),O.onChangeMonth&&e.isFunction(O.onChangeMonth)&&O.onChangeMonth.call(_,E.currentTime,_.data("input")),n!==E.currentTime.getFullYear()&&e.isFunction(O.onChangeYear)&&O.onChangeYear.call(_,E.currentTime,_.data("input"))}),_.setOptions=function(i){var o={},r=function(e){try{if(document.selection&&document.selection.createRange){var t=document.selection.createRange();return t.getBookmark().charCodeAt(2)-2}if(e.setSelectionRange)return e.selectionStart}catch(n){return 0}},s=function(e,t){if(e="string"==typeof e||e instanceof String?document.getElementById(e):e,!e)return!1;if(e.createTextRange){var n=e.createTextRange();return n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",t),n.select(),!0}return e.setSelectionRange?(e.setSelectionRange(t,t),!0):!1},P=function(e,t){var n=e.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g,"\\$1").replace(/_/g,"{digit+}").replace(/([0-9]{1})/g,"{digit$1}").replace(/\{digit([0-9]{1})\}/g,"[0-$1_]{1}").replace(/\{digit[\+]\}/g,"[0-9_]{1}");return new RegExp(n).test(t)};O=e.extend(!0,{},O,i),i.allowTimes&&e.isArray(i.allowTimes)&&i.allowTimes.length&&(O.allowTimes=e.extend(!0,[],i.allowTimes)),i.weekends&&e.isArray(i.weekends)&&i.weekends.length&&(O.weekends=e.extend(!0,[],i.weekends)),i.highlightedDates&&e.isArray(i.highlightedDates)&&i.highlightedDates.length&&(e.each(i.highlightedDates,function(n,i){var r,s=e.map(i.split(","),e.trim),l=new t(a.parseDate(s[0],O.formatDate),s[1],s[2]),u=a.formatDate(l.date,O.formatDate);void 0!==o[u]?(r=o[u].desc,r&&r.length&&l.desc&&l.desc.length&&(o[u].desc=r+"\n"+l.desc)):o[u]=l}),O.highlightedDates=e.extend(!0,[],o)),i.highlightedPeriods&&e.isArray(i.highlightedPeriods)&&i.highlightedPeriods.length&&(o=e.extend(!0,[],O.highlightedDates),e.each(i.highlightedPeriods,function(n,i){var r,s,l,u,c,d,p;if(e.isArray(i))r=i[0],s=i[1],l=i[2],p=i[3];else{var f=e.map(i.split(","),e.trim);r=a.parseDate(f[0],O.formatDate),s=a.parseDate(f[1],O.formatDate),l=f[2],p=f[3]}for(;s>=r;)u=new t(r,l,p),c=a.formatDate(r,O.formatDate),r.setDate(r.getDate()+1),void 0!==o[c]?(d=o[c].desc,d&&d.length&&u.desc&&u.desc.length&&(o[c].desc=d+"\n"+u.desc)):o[c]=u}),O.highlightedDates=e.extend(!0,[],o)),i.disabledDates&&e.isArray(i.disabledDates)&&i.disabledDates.length&&(O.disabledDates=e.extend(!0,[],i.disabledDates)),i.disabledWeekDays&&e.isArray(i.disabledWeekDays)&&i.disabledWeekDays.length&&(O.disabledWeekDays=e.extend(!0,[],i.disabledWeekDays)),!O.open&&!O.opened||O.inline||n.trigger("open.xdsoft"),O.inline&&(q=!0,_.addClass("xdsoft_inline"),n.after(_).hide()),O.inverseButton&&(O.next="xdsoft_prev",O.prev="xdsoft_next"),O.datepicker?W.addClass("active"):W.removeClass("active"),O.timepicker?H.addClass("active"):H.removeClass("active"),O.value&&(E.setCurrentTime(O.value),n&&n.val&&n.val(E.str)),isNaN(O.dayOfWeekStart)?O.dayOfWeekStart=0:O.dayOfWeekStart=parseInt(O.dayOfWeekStart,10)%7,O.timepickerScrollbar||Y.xdsoftScroller("hide"),O.minDate&&/^[\+\-](.*)$/.test(O.minDate)&&(O.minDate=a.formatDate(E.strToDateTime(O.minDate),O.formatDate)),O.maxDate&&/^[\+\-](.*)$/.test(O.maxDate)&&(O.maxDate=a.formatDate(E.strToDateTime(O.maxDate),O.formatDate)),L.toggle(O.showApplyButton),U.find(".xdsoft_today_button").css("visibility",O.todayButton?"visible":"hidden"),U.find("."+O.prev).css("visibility",O.prevButton?"visible":"hidden"),U.find("."+O.next).css("visibility",O.nextButton?"visible":"hidden"),O.mask&&(n.off("keydown.xdsoft"),O.mask===!0&&(O.mask=O.format.replace(/Y/g,"9999").replace(/F/g,"9999").replace(/m/g,"19").replace(/d/g,"39").replace(/H/g,"29").replace(/i/g,"59").replace(/s/g,"59")),"string"===e.type(O.mask)&&(P(O.mask,n.val())||(n.val(O.mask.replace(/[0-9]/g,"_")),s(n[0],0)),n.on("keydown.xdsoft",function(t){var a,i,o=this.value,I=t.which;if(I>=l&&u>=I||I>=c&&d>=I||I===g||I===f){for(a=r(this),i=I!==g&&I!==f?String.fromCharCode(I>=c&&d>=I?I-l:I):"_",I!==g&&I!==f||!a||(a-=1,i="_");/[^0-9_]/.test(O.mask.substr(a,1))&&a<O.mask.length&&a>0;)a+=I===g||I===f?-1:1;if(o=o.substr(0,a)+i+o.substr(a+1),""===e.trim(o))o=O.mask.replace(/[0-9]/g,"_");else if(a===O.mask.length)return t.preventDefault(),!1;for(a+=I===g||I===f?0:1;/[^0-9_]/.test(O.mask.substr(a,1))&&a<O.mask.length&&a>0;)a+=I===g||I===f?-1:1;P(O.mask,o)?(this.value=o,s(this,a)):""===e.trim(o)?this.value=O.mask.replace(/[0-9]/g,"_"):n.trigger("error_input.xdsoft")}else if(-1!==[$,x,T,M,S].indexOf(I)&&C||-1!==[h,v,w,b,y,D,p,k,m].indexOf(I))return!0;return t.preventDefault(),!1}))),O.validateOnBlur&&n.off("blur.xdsoft").on("blur.xdsoft",function(){if(O.allowBlank&&!e.trim(e(this).val()).length)e(this).val(null),_.data("xdsoft_datetime").empty();else if(a.parseDate(e(this).val(),O.format))_.data("xdsoft_datetime").setCurrentTime(e(this).val());else{var t=+[e(this).val()[0],e(this).val()[1]].join(""),n=+[e(this).val()[2],e(this).val()[3]].join("");!O.datepicker&&O.timepicker&&t>=0&&24>t&&n>=0&&60>n?e(this).val([t,n].map(function(e){return e>9?e:"0"+e}).join(":")):e(this).val(a.formatDate(E.now(),O.format)),_.data("xdsoft_datetime").setCurrentTime(e(this).val())}_.trigger("changedatetime.xdsoft")}),O.dayOfWeekStartPrev=0===O.dayOfWeekStart?6:O.dayOfWeekStart-1,_.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft")},_.data("options",O).on("touchstart mousedown.xdsoft",function(e){return e.stopPropagation(),e.preventDefault(),R.hide(),V.hide(),!1}),Y.append(j),Y.xdsoftScroller(),_.on("afterOpen.xdsoft",function(){Y.xdsoftScroller()}),_.append(W).append(H),O.withoutCopyright!==!0&&_.append(N),W.append(U).append(z).append(L),e(O.parentID).append(_),s=function(){var t=this;t.now=function(e){var n,a,i=new Date;return!e&&O.defaultDate&&(n=t.strToDateTime(O.defaultDate),i.setFullYear(n.getFullYear()),i.setMonth(n.getMonth()),i.setDate(n.getDate())),O.yearOffset&&i.setFullYear(i.getFullYear()+O.yearOffset),!e&&O.defaultTime&&(a=t.strtotime(O.defaultTime),i.setHours(a.getHours()),i.setMinutes(a.getMinutes())),i},t.isValidDate=function(e){return"[object Date]"!==Object.prototype.toString.call(e)?!1:!isNaN(e.getTime())},t.setCurrentTime=function(e){t.currentTime="string"==typeof e?t.strToDateTime(e):t.isValidDate(e)?e:t.now(),_.trigger("xchange.xdsoft")},t.empty=function(){t.currentTime=null},t.getCurrentTime=function(e){return t.currentTime},t.nextMonth=function(){void 0!==t.currentTime&&null!==t.currentTime||(t.currentTime=t.now());var n,a=t.currentTime.getMonth()+1;return 12===a&&(t.currentTime.setFullYear(t.currentTime.getFullYear()+1),a=0),n=t.currentTime.getFullYear(),t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(),a+1,0).getDate(),t.currentTime.getDate())),t.currentTime.setMonth(a),O.onChangeMonth&&e.isFunction(O.onChangeMonth)&&O.onChangeMonth.call(_,E.currentTime,_.data("input")),n!==t.currentTime.getFullYear()&&e.isFunction(O.onChangeYear)&&O.onChangeYear.call(_,E.currentTime,_.data("input")),_.trigger("xchange.xdsoft"),a},t.prevMonth=function(){void 0!==t.currentTime&&null!==t.currentTime||(t.currentTime=t.now());var n=t.currentTime.getMonth()-1;return-1===n&&(t.currentTime.setFullYear(t.currentTime.getFullYear()-1),n=11),t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(),n+1,0).getDate(),t.currentTime.getDate())),t.currentTime.setMonth(n),O.onChangeMonth&&e.isFunction(O.onChangeMonth)&&O.onChangeMonth.call(_,E.currentTime,_.data("input")),_.trigger("xchange.xdsoft"),n},t.getWeekOfYear=function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e-t)/864e5+t.getDay()+1)/7)},t.strToDateTime=function(e){var n,i,o=[];return e&&e instanceof Date&&t.isValidDate(e)?e:(o=/^(\+|\-)(.*)$/.exec(e),o&&(o[2]=a.parseDate(o[2],O.formatDate)),o&&o[2]?(n=o[2].getTime()-6e4*o[2].getTimezoneOffset(),i=new Date(t.now(!0).getTime()+parseInt(o[1]+"1",10)*n)):i=e?a.parseDate(e,O.format):t.now(),t.isValidDate(i)||(i=t.now()),i)},t.strToDate=function(e){if(e&&e instanceof Date&&t.isValidDate(e))return e;var n=e?a.parseDate(e,O.formatDate):t.now(!0);return t.isValidDate(n)||(n=t.now(!0)),n},t.strtotime=function(e){if(e&&e instanceof Date&&t.isValidDate(e))return e;var n=e?a.parseDate(e,O.formatTime):t.now(!0);return t.isValidDate(n)||(n=t.now(!0)),n},t.str=function(){return a.formatDate(t.currentTime,O.format)},t.currentTime=this.now()},E=new s,L.on("touchend click",function(e){e.preventDefault(),_.data("changed",!0),E.setCurrentTime(r()),n.val(E.str()),_.trigger("close.xdsoft")}),U.find(".xdsoft_today_button").on("touchend mousedown.xdsoft",function(){_.data("changed",!0),E.setCurrentTime(0),_.trigger("afterOpen.xdsoft")}).on("dblclick.xdsoft",function(){var e,t,a=E.getCurrentTime();a=new Date(a.getFullYear(),a.getMonth(),a.getDate()),e=E.strToDate(O.minDate),e=new Date(e.getFullYear(),e.getMonth(),e.getDate()),e>a||(t=E.strToDate(O.maxDate),t=new Date(t.getFullYear(),t.getMonth(),t.getDate()),a>t||(n.val(E.str()),n.trigger("change"),_.trigger("close.xdsoft")))}),U.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft",function(){var t=e(this),n=0,a=!1;!function i(e){t.hasClass(O.next)?E.nextMonth():t.hasClass(O.prev)&&E.prevMonth(),O.monthChangeSpinner&&(a||(n=setTimeout(i,e||100)))}(500),e([document.body,window]).on("touchend mouseup.xdsoft",function o(){clearTimeout(n),a=!0,e([document.body,window]).off("touchend mouseup.xdsoft",o)})}),H.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft",function(){var t=e(this),n=0,a=!1,i=110;!function o(e){var r=Y[0].clientHeight,s=j[0].offsetHeight,l=Math.abs(parseInt(j.css("marginTop"),10));t.hasClass(O.next)&&s-r-O.timeHeightInTimePicker>=l?j.css("marginTop","-"+(l+O.timeHeightInTimePicker)+"px"):t.hasClass(O.prev)&&l-O.timeHeightInTimePicker>=0&&j.css("marginTop","-"+(l-O.timeHeightInTimePicker)+"px"),Y.trigger("scroll_element.xdsoft_scroller",[Math.abs(parseInt(j.css("marginTop"),10)/(s-r))]),i=i>10?10:i-10,a||(n=setTimeout(o,e||i))}(500),e([document.body,window]).on("touchend mouseup.xdsoft",function r(){clearTimeout(n),a=!0,e([document.body,window]).off("touchend mouseup.xdsoft",r)})}),P=0,_.on("xchange.xdsoft",function(t){clearTimeout(P),P=setTimeout(function(){void 0!==E.currentTime&&null!==E.currentTime||(E.currentTime=E.now());for(var t,n,r,s,l,u,c,d,p,f,m="",h=new Date(E.currentTime.getFullYear(),E.currentTime.getMonth(),1,12,0,0),g=0,b=E.now(),v=!1,y=!1,w=[],k=!0,D="",$="";h.getDay()!==O.dayOfWeekStart;)h.setDate(h.getDate()-1);for(m+="<table><thead><tr>",O.weeks&&(m+="<th></th>"),t=0;7>t;t+=1)m+="<th>"+O.i18n[o].dayOfWeekShort[(t+O.dayOfWeekStart)%7]+"</th>";for(m+="</tr></thead>",m+="<tbody>",O.maxDate!==!1&&(v=E.strToDate(O.maxDate),v=new Date(v.getFullYear(),v.getMonth(),v.getDate(),23,59,59,999)),O.minDate!==!1&&(y=E.strToDate(O.minDate),y=new Date(y.getFullYear(),y.getMonth(),y.getDate()));g<E.currentTime.countDaysInMonth()||h.getDay()!==O.dayOfWeekStart||E.currentTime.getMonth()===h.getMonth();)w=[],g+=1,r=h.getDay(),s=h.getDate(),l=h.getFullYear(),u=h.getMonth(),c=E.getWeekOfYear(h),f="",w.push("xdsoft_date"),d=O.beforeShowDay&&e.isFunction(O.beforeShowDay.call)?O.beforeShowDay.call(_,h):null,v!==!1&&h>v||y!==!1&&y>h||d&&d[0]===!1?w.push("xdsoft_disabled"):-1!==O.disabledDates.indexOf(a.formatDate(h,O.formatDate))?w.push("xdsoft_disabled"):-1!==O.disabledWeekDays.indexOf(r)&&w.push("xdsoft_disabled"),d&&""!==d[1]&&w.push(d[1]),E.currentTime.getMonth()!==u&&w.push("xdsoft_other_month"),(O.defaultSelect||_.data("changed"))&&a.formatDate(E.currentTime,O.formatDate)===a.formatDate(h,O.formatDate)&&w.push("xdsoft_current"),a.formatDate(b,O.formatDate)===a.formatDate(h,O.formatDate)&&w.push("xdsoft_today"),0!==h.getDay()&&6!==h.getDay()&&-1===O.weekends.indexOf(a.formatDate(h,O.formatDate))||w.push("xdsoft_weekend"),void 0!==O.highlightedDates[a.formatDate(h,O.formatDate)]&&(n=O.highlightedDates[a.formatDate(h,O.formatDate)],w.push(void 0===n.style?"xdsoft_highlighted_default":n.style),f=void 0===n.desc?"":n.desc),O.beforeShowDay&&e.isFunction(O.beforeShowDay)&&w.push(O.beforeShowDay(h)),k&&(m+="<tr>",k=!1,O.weeks&&(m+="<th>"+c+"</th>")),m+='<td data-date="'+s+'" data-month="'+u+'" data-year="'+l+'" class="xdsoft_date xdsoft_day_of_week'+h.getDay()+" "+w.join(" ")+'" title="'+f+'"><div>'+s+"</div></td>",h.getDay()===O.dayOfWeekStartPrev&&(m+="</tr>",k=!0),h.setDate(s+1);if(m+="</tbody></table>",z.html(m),U.find(".xdsoft_label span").eq(0).text(O.i18n[o].months[E.currentTime.getMonth()]),U.find(".xdsoft_label span").eq(1).text(E.currentTime.getFullYear()),D="",$="",u="",p=function(t,n){var i,o,r=E.now(),s=O.allowTimes&&e.isArray(O.allowTimes)&&O.allowTimes.length;r.setHours(t),t=parseInt(r.getHours(),10),r.setMinutes(n),n=parseInt(r.getMinutes(),10),i=new Date(E.currentTime),i.setHours(t),i.setMinutes(n),w=[],(O.minDateTime!==!1&&O.minDateTime>i||O.maxTime!==!1&&E.strtotime(O.maxTime).getTime()<r.getTime()||O.minTime!==!1&&E.strtotime(O.minTime).getTime()>r.getTime())&&w.push("xdsoft_disabled"),(O.minDateTime!==!1&&O.minDateTime>i||O.disabledMinTime!==!1&&r.getTime()>E.strtotime(O.disabledMinTime).getTime()&&O.disabledMaxTime!==!1&&r.getTime()<E.strtotime(O.disabledMaxTime).getTime())&&w.push("xdsoft_disabled"),o=new Date(E.currentTime),o.setHours(parseInt(E.currentTime.getHours(),10)),s||o.setMinutes(Math[O.roundTime](E.currentTime.getMinutes()/O.step)*O.step),(O.initTime||O.defaultSelect||_.data("changed"))&&o.getHours()===parseInt(t,10)&&(!s&&O.step>59||o.getMinutes()===parseInt(n,10))&&(O.defaultSelect||_.data("changed")?w.push("xdsoft_current"):O.initTime&&w.push("xdsoft_init_time")),parseInt(b.getHours(),10)===parseInt(t,10)&&parseInt(b.getMinutes(),10)===parseInt(n,10)&&w.push("xdsoft_today"),D+='<div class="xdsoft_time '+w.join(" ")+'" data-hour="'+t+'" data-minute="'+n+'">'+a.formatDate(r,O.formatTime)+"</div>"},O.allowTimes&&e.isArray(O.allowTimes)&&O.allowTimes.length)for(g=0;g<O.allowTimes.length;g+=1)$=E.strtotime(O.allowTimes[g]).getHours(),u=E.strtotime(O.allowTimes[g]).getMinutes(),p($,u);else for(g=0,t=0;g<(O.hours12?12:24);g+=1)for(t=0;60>t;t+=O.step)$=(10>g?"0":"")+g,u=(10>t?"0":"")+t,p($,u);for(j.html(D),i="",g=0,g=parseInt(O.yearStart,10)+O.yearOffset;g<=parseInt(O.yearEnd,10)+O.yearOffset;g+=1)i+='<div class="xdsoft_option '+(E.currentTime.getFullYear()===g?"xdsoft_current":"")+'" data-value="'+g+'">'+g+"</div>";for(R.children().eq(0).html(i),g=parseInt(O.monthStart,10),i="";g<=parseInt(O.monthEnd,10);g+=1)i+='<div class="xdsoft_option '+(E.currentTime.getMonth()===g?"xdsoft_current":"")+'" data-value="'+g+'">'+O.i18n[o].months[g]+"</div>";V.children().eq(0).html(i),e(_).trigger("generate.xdsoft")},10),t.stopPropagation()}).on("afterOpen.xdsoft",function(){if(O.timepicker){var e,t,n,a;j.find(".xdsoft_current").length?e=".xdsoft_current":j.find(".xdsoft_init_time").length&&(e=".xdsoft_init_time"),e?(t=Y[0].clientHeight,n=j[0].offsetHeight,a=j.find(e).index()*O.timeHeightInTimePicker+1,a>n-t&&(a=n-t),Y.trigger("scroll_element.xdsoft_scroller",[parseInt(a,10)/(n-t)])):Y.trigger("scroll_element.xdsoft_scroller",[0])}}),I=0,z.on("touchend click.xdsoft","td",function(t){t.stopPropagation(),I+=1;var a=e(this),i=E.currentTime;return void 0!==i&&null!==i||(E.currentTime=E.now(),i=E.currentTime),a.hasClass("xdsoft_disabled")?!1:(i.setDate(1),i.setFullYear(a.data("year")),i.setMonth(a.data("month")),i.setDate(a.data("date")),_.trigger("select.xdsoft",[i]),n.val(E.str()),O.onSelectDate&&e.isFunction(O.onSelectDate)&&O.onSelectDate.call(_,E.currentTime,_.data("input"),t),_.data("changed",!0),_.trigger("xchange.xdsoft"),_.trigger("changedatetime.xdsoft"),(I>1||O.closeOnDateSelect===!0||O.closeOnDateSelect===!1&&!O.timepicker)&&!O.inline&&_.trigger("close.xdsoft"),void setTimeout(function(){I=0},200))}),j.on("touchend click.xdsoft","div",function(t){t.stopPropagation();var n=e(this),a=E.currentTime;return void 0!==a&&null!==a||(E.currentTime=E.now(),a=E.currentTime),n.hasClass("xdsoft_disabled")?!1:(a.setHours(n.data("hour")),a.setMinutes(n.data("minute")),_.trigger("select.xdsoft",[a]),_.data("input").val(E.str()),O.onSelectTime&&e.isFunction(O.onSelectTime)&&O.onSelectTime.call(_,E.currentTime,_.data("input"),t),_.data("changed",!0),_.trigger("xchange.xdsoft"),_.trigger("changedatetime.xdsoft"),void(O.inline!==!0&&O.closeOnTimeSelect===!0&&_.trigger("close.xdsoft")))}),W.on("mousewheel.xdsoft",function(e){return O.scrollMonth?(e.deltaY<0?E.nextMonth():E.prevMonth(),!1):!0}),n.on("mousewheel.xdsoft",function(e){return O.scrollInput?!O.datepicker&&O.timepicker?(F=j.find(".xdsoft_current").length?j.find(".xdsoft_current").eq(0).index():0,F+e.deltaY>=0&&F+e.deltaY<j.children().length&&(F+=e.deltaY),j.children().eq(F).length&&j.children().eq(F).trigger("mousedown"),!1):O.datepicker&&!O.timepicker?(W.trigger(e,[e.deltaY,e.deltaX,e.deltaY]),n.val&&n.val(E.str()),_.trigger("changedatetime.xdsoft"),!1):void 0:!0}),_.on("changedatetime.xdsoft",function(t){if(O.onChangeDateTime&&e.isFunction(O.onChangeDateTime)){var n=_.data("input");O.onChangeDateTime.call(_,E.currentTime,n,t),delete O.value,n.trigger("change")}}).on("generate.xdsoft",function(){O.onGenerate&&e.isFunction(O.onGenerate)&&O.onGenerate.call(_,E.currentTime,_.data("input")),q&&(_.trigger("afterOpen.xdsoft"),q=!1)}).on("click.xdsoft",function(e){e.stopPropagation()}),F=0,A=function(){var t,n=_.data("input").offset(),a=_.data("input")[0],i=n.top+a.offsetHeight-1,o=n.left,r="absolute";"rtl"==_.data("input").parent().css("direction")&&(o-=_.outerWidth()-_.data("input").outerWidth()),O.fixed?(i-=e(window).scrollTop(),o-=e(window).scrollLeft(),r="fixed"):(i+a.offsetHeight>e(window).height()+e(window).scrollTop()&&(i=n.top-a.offsetHeight+1),0>i&&(i=0),o+a.offsetWidth>e(window).width()&&(o=e(window).width()-a.offsetWidth)),t=_[0];do if(t=t.parentNode,"relative"===window.getComputedStyle(t).getPropertyValue("position")&&e(window).width()>=t.offsetWidth){o-=(e(window).width()-t.offsetWidth)/2;break}while("HTML"!==t.nodeName);_.css({left:o,top:i,position:r})},_.on("open.xdsoft",function(t){var n=!0;O.onShow&&e.isFunction(O.onShow)&&(n=O.onShow.call(_,E.currentTime,_.data("input"),t)),n!==!1&&(_.show(),A(),e(window).off("resize.xdsoft",A).on("resize.xdsoft",A),O.closeOnWithoutClick&&e([document.body,window]).on("touchstart mousedown.xdsoft",function a(){_.trigger("close.xdsoft"),e([document.body,window]).off("touchstart mousedown.xdsoft",a)}))}).on("close.xdsoft",function(t){var n=!0;U.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide(),O.onClose&&e.isFunction(O.onClose)&&(n=O.onClose.call(_,E.currentTime,_.data("input"),t)),n===!1||O.opened||O.inline||_.hide(),t.stopPropagation()}).on("toggle.xdsoft",function(e){_.is(":visible")?_.trigger("close.xdsoft"):_.trigger("open.xdsoft")}).data("input",n),B=0,J=0,_.data("xdsoft_datetime",E),_.setOptions(O),E.setCurrentTime(r()),n.data("xdsoft_datetimepicker",_).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart",function(e){n.is(":disabled")||n.data("xdsoft_datetimepicker").is(":visible")&&O.closeOnInputClick||(clearTimeout(B),B=setTimeout(function(){n.is(":disabled")||(q=!0,E.setCurrentTime(r()),_.trigger("open.xdsoft"))},100))}).on("keydown.xdsoft",function(t){var n,a=(this.value,t.which);return-1!==[m].indexOf(a)&&O.enterLikeTab?(n=e("input:visible,textarea:visible,button:visible,a:visible"),_.trigger("close.xdsoft"),n.eq(n.index(this)+1).focus(),!1):-1!==[k].indexOf(a)?(_.trigger("close.xdsoft"),!0):void 0})},s=function(t){var n=t.data("xdsoft_datetimepicker");n&&(n.data("xdsoft_datetime",null),n.remove(),t.data("xdsoft_datetimepicker",null).off(".xdsoft"),e(window).off("resize.xdsoft"),e([window,document.body]).off("mousedown.xdsoft touchstart"),t.unmousewheel&&t.unmousewheel())},e(document).off("keydown.xdsoftctrl keyup.xdsoftctrl").on("keydown.xdsoftctrl",function(e){e.keyCode===p&&(C=!0)}).on("keyup.xdsoftctrl",function(e){e.keyCode===p&&(C=!1)}),this.each(function(){var t,n=e(this).data("xdsoft_datetimepicker");if(n){if("string"===e.type(i))switch(i){case"show":e(this).select().focus(),n.trigger("open.xdsoft");break;case"hide":n.trigger("close.xdsoft");break;case"toggle":n.trigger("toggle.xdsoft");break;case"destroy":s(e(this));break;case"reset":this.value=this.defaultValue,this.value&&n.data("xdsoft_datetime").isValidDate(a.parseDate(this.value,O.format))||n.data("changed",!1),n.data("xdsoft_datetime").setCurrentTime(this.value);break;case"validate":t=n.data("input"),t.trigger("blur.xdsoft")}else n.setOptions(i);return 0}"string"!==e.type(i)&&(!O.lazyInit||O.open||O.inline?r(e(this)):I(e(this)))})},e.fn.datetimepicker.defaults=n}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e:e(jQuery)}(function(e){function t(t){var r=t||window.event,s=l.call(arguments,1),u=0,d=0,p=0,f=0,m=0,h=0;if(t=e.event.fix(r),t.type="mousewheel","detail"in r&&(p=-1*r.detail),"wheelDelta"in r&&(p=r.wheelDelta),"wheelDeltaY"in r&&(p=r.wheelDeltaY),"wheelDeltaX"in r&&(d=-1*r.wheelDeltaX),"axis"in r&&r.axis===r.HORIZONTAL_AXIS&&(d=-1*p,p=0),u=0===p?d:p,"deltaY"in r&&(p=-1*r.deltaY,u=p),"deltaX"in r&&(d=r.deltaX,0===p&&(u=-1*d)),0!==p||0!==d){if(1===r.deltaMode){var g=e.data(this,"mousewheel-line-height");u*=g,p*=g,d*=g}else if(2===r.deltaMode){var b=e.data(this,"mousewheel-page-height");u*=b,p*=b,d*=b}if(f=Math.max(Math.abs(p),Math.abs(d)),(!o||o>f)&&(o=f,a(r,f)&&(o/=40)),a(r,f)&&(u/=40,d/=40,p/=40),u=Math[u>=1?"floor":"ceil"](u/o),d=Math[d>=1?"floor":"ceil"](d/o),p=Math[p>=1?"floor":"ceil"](p/o),c.settings.normalizeOffset&&this.getBoundingClientRect){var v=this.getBoundingClientRect();m=t.clientX-v.left,h=t.clientY-v.top}return t.deltaX=d,t.deltaY=p,t.deltaFactor=o,t.offsetX=m,t.offsetY=h,t.deltaMode=0,s.unshift(t,u,d,p),i&&clearTimeout(i),i=setTimeout(n,200),(e.event.dispatch||e.event.handle).apply(this,s)}}function n(){o=null}function a(e,t){return c.settings.adjustOldDeltas&&"mousewheel"===e.type&&t%120===0}var i,o,r=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],s="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],l=Array.prototype.slice;if(e.event.fixHooks)for(var u=r.length;u;)e.event.fixHooks[r[--u]]=e.event.mouseHooks;var c=e.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var n=s.length;n;)this.addEventListener(s[--n],t,!1);else this.onmousewheel=t;e.data(this,"mousewheel-line-height",c.getLineHeight(this)),e.data(this,"mousewheel-page-height",c.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var n=s.length;n;)this.removeEventListener(s[--n],t,!1);else this.onmousewheel=null;e.removeData(this,"mousewheel-line-height"),e.removeData(this,"mousewheel-page-height")},getLineHeight:function(t){var n=e(t),a=n["offsetParent"in e.fn?"offsetParent":"parent"]();return a.length||(a=e("body")),parseInt(a.css("fontSize"),10)||parseInt(n.css("fontSize"),10)||16},getPageHeight:function(t){return e(t).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})}),+function(e,t){function n(n,a){function i(){var e='<div class="input-group"><span class="input-group-btn"><button data-toggle="collapse" href="#'+a.mapContainerId+'" class="btn btn-default"><span class="glyphicon glyphicon-globe"></span></button></span></div>';return e}function o(){if(a.mapContainerId){var t=e(n),o=t.parent(),r=o.children().index(n);t.replaceWith(i()),o.children().eq(r).append(n)}}function r(e){if(e){var t={query:e};k&&k.textSearch(t,function(e,t){if(t===google.maps.places.PlacesServiceStatus.OK)for(var n=0;n<e.length;n++)return void f(e[n])})}}function s(e){w.geocode({latLng:e},function(e,t){if(t===google.maps.GeocoderStatus.OK&&e[0]){var n=e[0];f(n,!1)}})}function l(){return h=e(a.map).get(0),h||a.mapContainerId&&(h=e("#"+a.mapContainerId+" .placepicker-map").get(0)),!!h}function u(){l()&&(g=new google.maps.Map(h,a.mapOptions),v.bindTo("bounds",g),google.maps.event.addListener(g,"click",function(e){var t=e.latLng;b.setPosition(t),g.panTo(t),n.blur(),s(t)}),b=new google.maps.Marker({map:g}),k=new google.maps.places.PlacesService(g),e(h).parent().on("show.bs.collapse",function(t){e(t.target).css("display","block").find('img[src*="gstatic.com/"], img[src*="googleapis.com/"]').css("max-width","none"),n.value?y.resize():y.geoLocation(),e(t.target).css("display","")}))}function c(){v=new google.maps.places.Autocomplete(n,a.autoCompleteOptions),google.maps.event.addListener(v,"place_changed",function(){var e=v.getPlace();e.geometry&&f(e)})}function d(){y.resize.call(y)}function p(){if(w=new google.maps.Geocoder,o(),c(),u(),n.value)r(n.value);else{var i=a.latitude||e(a.latitudeInput).prop("value"),s=a.longitude||e(a.longitudeInput).prop("value");i&&s&&y.setLocation(i,s)}e(t).on("resize",d),e(n).on("keypress",function(e){a.preventSubmit&&13===e.keyCode&&(e.preventDefault(),e.stopImmediatePropagation())})}function f(t,i){i="undefined"==typeof i,D=t,y.resize();var o=t.geometry.location;i&&m(o),e(a.latitudeInput).prop("value",o.lat()),e(a.longitudeInput).prop("value",o.lng()),i||(n.value=t.formatted_address),"function"==typeof a.placeChanged&&a.placeChanged.call(y,t)}function m(e){if(g){g.setCenter(e);var t=a.icon||a.placesIcon&&place.icon?place.icon:null;if(t){var n={url:t,size:new google.maps.Size(71,71),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(35,35)};b.setIcon(n)}b.setPosition(e),b.setVisible(!0)}}var h,g,b,v,y=this,w=null,k=null,D=null,$=null;this.setValue=function(e){n.value=e,r(e)},this.getValue=function(){return n.value},this.setLocation=function(e,t){var n=new google.maps.LatLng(e,t);this.setLatLng(n)},this.getLocation=function(){var e=this.getLatLng();return{latitude:e&&e.lat()||a.latitude,longitude:e&&e.lng()||a.longitude}},this.setLatLng=function(e){$=e,s($)},this.getLatLng=function(){return D&&D.geometry?D.geometry.location:$},this.getMap=function(){return g},this.reload=function(){g&&r(n.value)},this.resize=function(){if(g){var e=g.getCenter();google.maps.event.trigger(g,"resize"),g.setCenter(e)}},this.geoLocation=function(e){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){var n=new google.maps.LatLng(t.coords.latitude,t.coords.longitude);m(n),s(n),e&&e(n)},function(){e&&e(null)}):e&&e(null)},p.call(this)}var a="placepicker",i={map:"",mapOptions:{zoom:15},places:{icons:!1},autoCompleteOptions:{},placeChanged:null,location:null,preventSubmit:!0},o=n;e.fn[a]=function(t){return this.each(function(){return e(this).data(a)||e(this).data(a,new o(this,e.extend({},i,t,e(this).data()))),e(this)})}}(jQuery,window),function(){"use strict";function e(e,t){return{link:function(n,a,i){var o=t(i.focused);n.$watch(o,function(t){t===!0&&e(function(){a[0].focus()})}),a.bind("blur",function(){o&&o.assign&&n.$apply(o.assign(n,!1))})}}}angular.module("angular-confirm").directive("focused",e),e.$inject=["$timeout","$parse"]}(),function(){"use strict";function e(e){return{restrict:"A",link:function(t,n,a){n.bind("click",function(){e.history.back()})}}}angular.module("meetupModule").directive("back",e),e.$inject=["$window"]}(),function(){"use strict";angular.module("meetupModule").directive("scrollOnFocus",function(){return{restrict:"A",link:function(e,t){t.focus(function(){$("body").animate({scrollTop:t.offset().top},1e3)})}}})}(),function(){"use strict";angular.module("meetupModule").directive("myValidation",function(){return{restrict:"A",require:"^form",link:function(e,t,n,a){var i=t[0].querySelector("[name]"),o=angular.element(i),r=o.attr("name"),s=!1;o.bind("blur",function(){s=!0,t.toggleClass("has-error",a[r].$invalid)}),e.$watch(function(){return a[r].$invalid},function(e){!s&&e||t.toggleClass("has-error",e)}),e.$on("show-errors-check-validity",function(){t.toggleClass("has-error",a[r].$invalid)}),e.$on("show-errors-reset",function(){$timeout(function(){t.removeClass("has-error")},0,!1)})}}})}(),function(){"use strict";
angular.module("meetupModule").directive("loadingCircle",function(){return{restrict:"E",scope:{size:"="},templateUrl:"/Scripts/Directives/loading-circle/loading-circle.html"}})}(),function(){"use strict";function e(){return{restrict:"E",transclude:!0,scope:{hassubmit:"=",submit:"&onSubmit",back:"&onBack",title:"="},templateUrl:"/Scripts/Directives/subpage-nav/subpage-nav.html"}}angular.module("meetupModule").directive("subpageNav",e)}(),function(){angular.module("meetupModule").service("dummyDataService",function(){var e="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ultrices enim ac augue sodales facilisis. Ut in sollicitudin metus. Nulla tincidunt sapien ac eros tristique, eu aliquet arcu posuere. Etiam eget urna malesuada, iaculis erat at, sollicitudin lorem. Donec at suscipit ante. ";return{loremIpsum:e,participatedMeetups:function(){return[{title:"淫乱大趴",description:e,host:"刘宽"},{title:"学术大趴",description:e,host:"大哥"},{title:"没有主题热闹就好大趴",description:e,host:"克里斯"}]},hostedMeetups:function(){return[{title:"岛国动作片赏观会",description:e},{title:"米国动作片赏观会",description:e},{title:"猎奇动作片赏观会",description:e}]}}})}();
//# sourceMappingURL=data:application/json;base64,
